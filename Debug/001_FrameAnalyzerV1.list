
001_FrameAnalyzerV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003814  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080039a4  080039a4  000049a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa0  08003aa0  00005360  2**0
                  CONTENTS
  4 .ARM          00000008  08003aa0  08003aa0  00004aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aa8  08003aa8  00005360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa8  08003aa8  00004aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003aac  08003aac  00004aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000360  20000000  08003ab0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005360  2**0
                  CONTENTS
 10 .bss          0000a45c  20000360  20000360  00005360  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a7bc  2000a7bc  00005360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e69  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6d  00000000  00000000  0000d1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0000f068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e5  00000000  00000000  0000f870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f1a  00000000  00000000  0000fe55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae73  00000000  00000000  00030d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3391  00000000  00000000  0003bbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fef73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000231c  00000000  00000000  000fefb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  001012d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800398c 	.word	0x0800398c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0800398c 	.word	0x0800398c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <MX_DMA_Init+0x3c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <MX_DMA_Init+0x3c>)
 8000570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <MX_DMA_Init+0x3c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	203b      	movs	r0, #59	@ 0x3b
 8000588:	f000 ffb5 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800058c:	203b      	movs	r0, #59	@ 0x3b
 800058e:	f000 ffce 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b3a      	ldr	r3, [pc, #232]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a39      	ldr	r2, [pc, #228]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b37      	ldr	r3, [pc, #220]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a32      	ldr	r2, [pc, #200]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2108      	movs	r1, #8
 80005f2:	482d      	ldr	r0, [pc, #180]	@ (80006a8 <MX_GPIO_Init+0x108>)
 80005f4:	f001 fcda 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	482b      	ldr	r0, [pc, #172]	@ (80006ac <MX_GPIO_Init+0x10c>)
 80005fe:	f001 fcd5 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <MX_GPIO_Init+0x10c>)
 8000608:	f001 fcd0 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800060c:	2308      	movs	r3, #8
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <MX_GPIO_Init+0x108>)
 8000624:	f001 fb0e 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_SS_Pin;
 8000628:	230a      	movs	r3, #10
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	481b      	ldr	r0, [pc, #108]	@ (80006ac <MX_GPIO_Init+0x10c>)
 8000640:	f001 fb00 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ANALYZER_SCL_IT_RISING_Pin|ANALYZER_SDA_IT_RISING_Pin;
 8000644:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <MX_GPIO_Init+0x108>)
 800065c:	f001 faf2 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ANALYZER_SCL_IT_FALLING_Pin|ANALYZER_SDA_IT_FALLING_Pin;
 8000660:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000666:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <MX_GPIO_Init+0x108>)
 8000678:	f001 fae4 	bl	8001c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2017      	movs	r0, #23
 8000682:	f000 ff38 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000686:	2017      	movs	r0, #23
 8000688:	f000 ff51 	bl	800152e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2028      	movs	r0, #40	@ 0x28
 8000692:	f000 ff30 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000696:	2028      	movs	r0, #40	@ 0x28
 8000698:	f000 ff49 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020000 	.word	0x40020000

080006b0 <i2c_convert_i2c_byte>:
static i2c_conversion_state conversion = CONVERSION_NOT_READY;

volatile int i2c_last_scl_bit_value = 1;

static void i2c_convert_i2c_byte()
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	volatile int i2c_ready_byte = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < 8; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e00d      	b.n	80006dc <i2c_convert_i2c_byte+0x2c>
	{
		i2c_ready_byte += i2c_bits[7 - i] << i;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <i2c_convert_i2c_byte+0x5c>)
 80006c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	409a      	lsls	r2, r3
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	ddee      	ble.n	80006c0 <i2c_convert_i2c_byte+0x10>
	}

	i2c_bytes[i2c_bytes_counter] = i2c_ready_byte;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <i2c_convert_i2c_byte+0x60>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	490a      	ldr	r1, [pc, #40]	@ (8000714 <i2c_convert_i2c_byte+0x64>)
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_bytes_counter++;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <i2c_convert_i2c_byte+0x60>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a06      	ldr	r2, [pc, #24]	@ (8000710 <i2c_convert_i2c_byte+0x60>)
 80006f6:	6013      	str	r3, [r2, #0]
	conversion = CONVERSION_READY;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <i2c_convert_i2c_byte+0x68>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	2000037c 	.word	0x2000037c
 8000710:	20000580 	.word	0x20000580
 8000714:	20000480 	.word	0x20000480
 8000718:	20000588 	.word	0x20000588

0800071c <i2c_read_data>:

i2c_analyze_state i2c_read_data()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	i2c_last_scl_bit_value = 1;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <i2c_read_data+0x68>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
	i2c_bits[i2c_bits_counter] = HAL_GPIO_ReadPin(ANALYZER_SDA_IT_RISING_GPIO_Port, ANALYZER_SDA_IT_RISING_Pin);
 8000726:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072a:	4817      	ldr	r0, [pc, #92]	@ (8000788 <i2c_read_data+0x6c>)
 800072c:	f001 fc26 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <i2c_read_data+0x70>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4611      	mov	r1, r2
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <i2c_read_data+0x74>)
 800073c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


	if ( ( ( i2c_bits_counter + OFFSET ) % ACK_BIT ) != 0 )
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <i2c_read_data+0x70>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	1c59      	adds	r1, r3, #1
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <i2c_read_data+0x78>)
 8000748:	fb83 2301 	smull	r2, r3, r3, r1
 800074c:	105a      	asrs	r2, r3, #1
 800074e:	17cb      	asrs	r3, r1, #31
 8000750:	1ad2      	subs	r2, r2, r3
 8000752:	4613      	mov	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	1aca      	subs	r2, r1, r3
 800075a:	2a00      	cmp	r2, #0
 800075c:	d009      	beq.n	8000772 <i2c_read_data+0x56>
	{
		i2c_bits_counter++;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <i2c_read_data+0x70>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	4a09      	ldr	r2, [pc, #36]	@ (800078c <i2c_read_data+0x70>)
 8000766:	6013      	str	r3, [r2, #0]
		conversion = CONVERSION_NOT_READY;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <i2c_read_data+0x7c>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
		return I2C_BIT_SAVED;
 800076e:	2300      	movs	r3, #0
 8000770:	e005      	b.n	800077e <i2c_read_data+0x62>
	}
	else
	{
		i2c_convert_i2c_byte();
 8000772:	f7ff ff9d 	bl	80006b0 <i2c_convert_i2c_byte>
		i2c_bits_counter = 0;
 8000776:	4b05      	ldr	r3, [pc, #20]	@ (800078c <i2c_read_data+0x70>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
		return I2C_BYTE_SAVED;
 800077c:	2301      	movs	r3, #1
	}


}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000000 	.word	0x20000000
 8000788:	40020800 	.word	0x40020800
 800078c:	2000047c 	.word	0x2000047c
 8000790:	2000037c 	.word	0x2000037c
 8000794:	38e38e39 	.word	0x38e38e39
 8000798:	20000588 	.word	0x20000588

0800079c <i2c_get_ready_i2c_byte>:
		return CONVERSION_NOT_READY;
	}
}

int i2c_get_ready_i2c_byte()
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
	int temp = i2c_next_byte_counter;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <i2c_get_ready_i2c_byte+0x3c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	607b      	str	r3, [r7, #4]
	i2c_next_byte_counter++;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <i2c_get_ready_i2c_byte+0x3c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <i2c_get_ready_i2c_byte+0x3c>)
 80007b0:	6013      	str	r3, [r2, #0]
	i2c_conversion_state state = conversion;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <i2c_get_ready_i2c_byte+0x40>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	70fb      	strb	r3, [r7, #3]
	if(state == CONVERSION_READY)
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d102      	bne.n	80007c4 <i2c_get_ready_i2c_byte+0x28>
	{
		conversion = CONVERSION_NOT_READY;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <i2c_get_ready_i2c_byte+0x40>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
	}

	return i2c_bytes[temp];
 80007c4:	4a06      	ldr	r2, [pc, #24]	@ (80007e0 <i2c_get_ready_i2c_byte+0x44>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	20000584 	.word	0x20000584
 80007dc:	20000588 	.word	0x20000588
 80007e0:	20000480 	.word	0x20000480

080007e4 <i2c_check_for_start>:

i2c_tx_state i2c_check_for_start()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ANALYZER_SCL_IT_RISING_GPIO_Port, ANALYZER_SCL_IT_RISING_Pin) == GPIO_PIN_SET)
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	4808      	ldr	r0, [pc, #32]	@ (800080c <i2c_check_for_start+0x28>)
 80007ec:	f001 fbc6 	bl	8001f7c <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d105      	bne.n	8000802 <i2c_check_for_start+0x1e>
	{
		if(i2c_last_scl_bit_value == 1)
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <i2c_check_for_start+0x2c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d103      	bne.n	8000806 <i2c_check_for_start+0x22>
		{
			return I2C_START;
 80007fe:	2301      	movs	r3, #1
 8000800:	e001      	b.n	8000806 <i2c_check_for_start+0x22>
		}
	}
	else
	{
		return I2C_NO_TX;
 8000802:	2303      	movs	r3, #3
 8000804:	e7ff      	b.n	8000806 <i2c_check_for_start+0x22>
	}
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40020800 	.word	0x40020800
 8000810:	20000000 	.word	0x20000000

08000814 <i2c_check_for_stop>:

i2c_tx_state i2c_check_for_stop()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ANALYZER_SCL_IT_RISING_GPIO_Port, ANALYZER_SCL_IT_RISING_Pin) == GPIO_PIN_SET)
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	4808      	ldr	r0, [pc, #32]	@ (800083c <i2c_check_for_stop+0x28>)
 800081c:	f001 fbae 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d105      	bne.n	8000832 <i2c_check_for_stop+0x1e>
	{
		if(i2c_last_scl_bit_value == 1)
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <i2c_check_for_stop+0x2c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d103      	bne.n	8000836 <i2c_check_for_stop+0x22>
		{
			return I2C_STOP;
 800082e:	2300      	movs	r3, #0
 8000830:	e001      	b.n	8000836 <i2c_check_for_stop+0x22>
		}
	}
	else
	{
		return I2C_DATA;
 8000832:	2302      	movs	r3, #2
 8000834:	e7ff      	b.n	8000836 <i2c_check_for_stop+0x22>
	}
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020800 	.word	0x40020800
 8000840:	20000000 	.word	0x20000000

08000844 <i2c_scl_falling>:

void i2c_scl_falling()
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	i2c_last_scl_bit_value = 1;
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <i2c_scl_falling+0x14>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	20000000 	.word	0x20000000

0800085c <i2c_reset_all>:

void i2c_reset_all()
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
	for(int i = 0; i < 64; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	e00c      	b.n	8000882 <i2c_reset_all+0x26>
	{
		i2c_bits[i] = 0;
 8000868:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <i2c_reset_all+0x50>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2100      	movs	r1, #0
 800086e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i2c_bytes[i] = 0;
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <i2c_reset_all+0x54>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2100      	movs	r1, #0
 8000878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 64; i++)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b3f      	cmp	r3, #63	@ 0x3f
 8000886:	ddef      	ble.n	8000868 <i2c_reset_all+0xc>
	}

	i2c_bits_counter = 0;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <i2c_reset_all+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]

	i2c_bytes_counter = 0;
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <i2c_reset_all+0x5c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	i2c_next_byte_counter = 0;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <i2c_reset_all+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]

	conversion = CONVERSION_NOT_READY;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <i2c_reset_all+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	2000037c 	.word	0x2000037c
 80008b0:	20000480 	.word	0x20000480
 80008b4:	2000047c 	.word	0x2000047c
 80008b8:	20000580 	.word	0x20000580
 80008bc:	20000584 	.word	0x20000584
 80008c0:	20000588 	.word	0x20000588

080008c4 <lcd_send_command>:
};

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_send_command(uint8_t cmd)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2102      	movs	r1, #2
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <lcd_send_command+0x40>)
 80008d4:	f001 fb6a 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2108      	movs	r1, #8
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <lcd_send_command+0x40>)
 80008de:	f001 fb65 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80008e2:	1df9      	adds	r1, r7, #7
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	2201      	movs	r2, #1
 80008ea:	4807      	ldr	r0, [pc, #28]	@ (8000908 <lcd_send_command+0x44>)
 80008ec:	f002 f83d 	bl	800296a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2108      	movs	r1, #8
 80008f4:	4803      	ldr	r0, [pc, #12]	@ (8000904 <lcd_send_command+0x40>)
 80008f6:	f001 fb59 	bl	8001fac <HAL_GPIO_WritePin>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020000 	.word	0x40020000
 8000908:	2000a5b4 	.word	0x2000a5b4

0800090c <lcd_send_data>:

static void lcd_send_data(uint8_t data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2102      	movs	r1, #2
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <lcd_send_data+0x40>)
 800091c:	f001 fb46 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2108      	movs	r1, #8
 8000924:	4809      	ldr	r0, [pc, #36]	@ (800094c <lcd_send_data+0x40>)
 8000926:	f001 fb41 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800092a:	1df9      	adds	r1, r7, #7
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	2201      	movs	r2, #1
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <lcd_send_data+0x44>)
 8000934:	f002 f819 	bl	800296a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2108      	movs	r1, #8
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <lcd_send_data+0x40>)
 800093e:	f001 fb35 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020000 	.word	0x40020000
 8000950:	2000a5b4 	.word	0x2000a5b4

08000954 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <lcd_send+0x20>
		lcd_send_command(value);
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ffa9 	bl	80008c4 <lcd_send_command>
	} else {
		lcd_send_data(value);
	}
}
 8000972:	e004      	b.n	800097e <lcd_send+0x2a>
		lcd_send_data(value);
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ffc7 	bl	800090c <lcd_send_data>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	4817      	ldr	r0, [pc, #92]	@ (80009f0 <lcd_init+0x68>)
 8000994:	f001 fb0a 	bl	8001fac <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f000 fcad 	bl	80012f8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2108      	movs	r1, #8
 80009a2:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <lcd_init+0x68>)
 80009a4:	f001 fb02 	bl	8001fac <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009a8:	2064      	movs	r0, #100	@ 0x64
 80009aa:	f000 fca5 	bl	80012f8 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	e009      	b.n	80009c8 <lcd_init+0x40>
    lcd_send(init_table[i]);
 80009b4:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <lcd_init+0x6c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffc9 	bl	8000954 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b4b      	cmp	r3, #75	@ 0x4b
 80009cc:	d9f2      	bls.n	80009b4 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 80009ce:	20c8      	movs	r0, #200	@ 0xc8
 80009d0:	f000 fc92 	bl	80012f8 <HAL_Delay>

  lcd_send_command(ST7735S_SLPOUT);
 80009d4:	2011      	movs	r0, #17
 80009d6:	f7ff ff75 	bl	80008c4 <lcd_send_command>
  HAL_Delay(110);
 80009da:	206e      	movs	r0, #110	@ 0x6e
 80009dc:	f000 fc8c 	bl	80012f8 <HAL_Delay>

  lcd_send_command(ST7735S_DISPON);
 80009e0:	2029      	movs	r0, #41	@ 0x29
 80009e2:	f7ff ff6f 	bl	80008c4 <lcd_send_command>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40020800 	.word	0x40020800
 80009f4:	080039bc 	.word	0x080039bc

080009f8 <lcd_send_data16>:

static void lcd_send_data16(uint16_t value)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	80fb      	strh	r3, [r7, #6]
	lcd_send_data(value >> 8);
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff7e 	bl	800090c <lcd_send_data>
	lcd_send_data(value);
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff79 	bl	800090c <lcd_send_data>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	603b      	str	r3, [r7, #0]
	lcd_send_command(ST7735S_CASET);
 8000a30:	202a      	movs	r0, #42	@ 0x2a
 8000a32:	f7ff ff47 	bl	80008c4 <lcd_send_command>
	lcd_send_data16(LCD_OFFSET_X + x);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffda 	bl	80009f8 <lcd_send_data16>
	lcd_send_data16(LCD_OFFSET_X + x + width - 1);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffd1 	bl	80009f8 <lcd_send_data16>

	lcd_send_command(ST7735S_RASET);
 8000a56:	202b      	movs	r0, #43	@ 0x2b
 8000a58:	f7ff ff34 	bl	80008c4 <lcd_send_command>
	lcd_send_data16(LCD_OFFSET_Y + y);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	3302      	adds	r3, #2
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ffc7 	bl	80009f8 <lcd_send_data16>
	lcd_send_data16(LCD_OFFSET_Y + y + height- 1);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	3301      	adds	r3, #1
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffbc 	bl	80009f8 <lcd_send_data16>
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	4613      	mov	r3, r2
 8000a94:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	015b      	lsls	r3, r3, #5
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4905      	ldr	r1, [pc, #20]	@ (8000abc <lcd_put_pixel+0x34>)
 8000aa8:	88fa      	ldrh	r2, [r7, #6]
 8000aaa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000058c 	.word	0x2000058c

08000ac0 <fill_with>:

void fill_with(uint16_t color){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]

	 int i = LCD_WIDTH * LCD_HEIGHT - 1;
 8000aca:	f644 73ff 	movw	r3, #20479	@ 0x4fff
 8000ace:	60fb      	str	r3, [r7, #12]
	 while(i >= 0){
 8000ad0:	e007      	b.n	8000ae2 <fill_with+0x22>
		frame_buffer[i] = color;
 8000ad2:	4909      	ldr	r1, [pc, #36]	@ (8000af8 <fill_with+0x38>)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	88fa      	ldrh	r2, [r7, #6]
 8000ad8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		--i;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
	 while(i >= 0){
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	daf4      	bge.n	8000ad2 <fill_with+0x12>
	 }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	2000058c 	.word	0x2000058c

08000afc <lcd_copy>:

void lcd_copy(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	22a0      	movs	r2, #160	@ 0xa0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff ff8b 	bl	8000a22 <lcd_set_window>
	lcd_send_command(ST7735S_RAMWR);
 8000b0c:	202c      	movs	r0, #44	@ 0x2c
 8000b0e:	f7ff fed9 	bl	80008c4 <lcd_send_command>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2102      	movs	r1, #2
 8000b16:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <lcd_copy+0x3c>)
 8000b18:	f001 fa48 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <lcd_copy+0x3c>)
 8000b22:	f001 fa43 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8000b26:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000b2a:	4904      	ldr	r1, [pc, #16]	@ (8000b3c <lcd_copy+0x40>)
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <lcd_copy+0x44>)
 8000b2e:	f002 f85f 	bl	8002bf0 <HAL_SPI_Transmit_DMA>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	2000058c 	.word	0x2000058c
 8000b40:	2000a5b4 	.word	0x2000a5b4

08000b44 <LCD_DisplayChar>:
		return true;
	else
		return false;
}

void LCD_DisplayChar(uint16_t Xpoint, uint16_t Ypoint, char Acsii_Char, uint16_t Color) {
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4623      	mov	r3, r4
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	4603      	mov	r3, r0
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70fb      	strb	r3, [r7, #3]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	803b      	strh	r3, [r7, #0]
    const uint8_t Font_Width = FONT_WIDTH; // Szerokość czcionki
 8000b62:	2305      	movs	r3, #5
 8000b64:	73fb      	strb	r3, [r7, #15]
    const uint8_t Font_Height = FONT_HEIGHT; // Wysokość czcionki
 8000b66:	2308      	movs	r3, #8
 8000b68:	73bb      	strb	r3, [r7, #14]

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font_Height * (Font_Width / 8 + (Font_Width % 8 ? 1 : 0));
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	3b20      	subs	r3, #32
 8000b6e:	7bba      	ldrb	r2, [r7, #14]
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	08d2      	lsrs	r2, r2, #3
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	7bfa      	ldrb	r2, [r7, #15]
 8000b7e:	f002 0207 	and.w	r2, r2, #7
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	bf14      	ite	ne
 8000b88:	2201      	movne	r2, #1
 8000b8a:	2200      	moveq	r2, #0
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440a      	add	r2, r1
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	60bb      	str	r3, [r7, #8]
    const unsigned char* ptr = &Font8_Table[Char_Offset];
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <LCD_DisplayChar+0xe0>)
 8000b9a:	4413      	add	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]

    for (uint16_t Page = 0; Page < Font_Height; Page++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	827b      	strh	r3, [r7, #18]
 8000ba2:	e035      	b.n	8000c10 <LCD_DisplayChar+0xcc>
        for (uint16_t Column = 0; Column < Font_Width; Column++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	823b      	strh	r3, [r7, #16]
 8000ba8:	e021      	b.n	8000bee <LCD_DisplayChar+0xaa>
            if (*ptr & (0x80 >> (Column % 8))) {
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	8a3b      	ldrh	r3, [r7, #16]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	2280      	movs	r2, #128	@ 0x80
 8000bb8:	fa42 f303 	asr.w	r3, r2, r3
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d009      	beq.n	8000bd6 <LCD_DisplayChar+0x92>
                lcd_put_pixel(Xpoint + Column, Ypoint + Page, Color);
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	8a3b      	ldrh	r3, [r7, #16]
 8000bc6:	18d0      	adds	r0, r2, r3
 8000bc8:	88ba      	ldrh	r2, [r7, #4]
 8000bca:	8a7b      	ldrh	r3, [r7, #18]
 8000bcc:	4413      	add	r3, r2
 8000bce:	883a      	ldrh	r2, [r7, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f7ff ff59 	bl	8000a88 <lcd_put_pixel>
            }

            if (Column % 8 == 7) {
 8000bd6:	8a3b      	ldrh	r3, [r7, #16]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d102      	bne.n	8000be8 <LCD_DisplayChar+0xa4>
                ptr++;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
        for (uint16_t Column = 0; Column < Font_Width; Column++) {
 8000be8:	8a3b      	ldrh	r3, [r7, #16]
 8000bea:	3301      	adds	r3, #1
 8000bec:	823b      	strh	r3, [r7, #16]
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	8a3a      	ldrh	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3d8      	bcc.n	8000baa <LCD_DisplayChar+0x66>
            }
        }

        if (Font_Width % 8 != 0) {
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <LCD_DisplayChar+0xc6>
            ptr++;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3301      	adds	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
    for (uint16_t Page = 0; Page < Font_Height; Page++) {
 8000c0a:	8a7b      	ldrh	r3, [r7, #18]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	827b      	strh	r3, [r7, #18]
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	8a7a      	ldrh	r2, [r7, #18]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d3c4      	bcc.n	8000ba4 <LCD_DisplayChar+0x60>
        }
    }
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	20000004 	.word	0x20000004

08000c28 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xstart, uint16_t Ystart, char* pString, uint16_t Color) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60ba      	str	r2, [r7, #8]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	81fb      	strh	r3, [r7, #14]
 8000c36:	460b      	mov	r3, r1
 8000c38:	81bb      	strh	r3, [r7, #12]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
    const uint8_t Font_Width = FONT_WIDTH; // Szerokość czcionki
 8000c3e:	2305      	movs	r3, #5
 8000c40:	75fb      	strb	r3, [r7, #23]
    const uint8_t Font_Height = FONT_HEIGHT; // Wysokość czcionki
 8000c42:	2308      	movs	r3, #8
 8000c44:	75bb      	strb	r3, [r7, #22]

    while (*pString != '\0') {
 8000c46:	e01f      	b.n	8000c88 <LCD_DisplayString+0x60>
        if (Xstart + Font_Width > LCD_WIDTH) {
 8000c48:	89fa      	ldrh	r2, [r7, #14]
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c50:	dd06      	ble.n	8000c60 <LCD_DisplayString+0x38>
            Xstart = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	81fb      	strh	r3, [r7, #14]
            Ystart += Font_Height;
 8000c56:	7dbb      	ldrb	r3, [r7, #22]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	89bb      	ldrh	r3, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	81bb      	strh	r3, [r7, #12]
        }

        if (Ystart + Font_Height > LCD_HEIGHT) {
 8000c60:	89ba      	ldrh	r2, [r7, #12]
 8000c62:	7dbb      	ldrb	r3, [r7, #22]
 8000c64:	4413      	add	r3, r2
 8000c66:	2b80      	cmp	r3, #128	@ 0x80
 8000c68:	dc13      	bgt.n	8000c92 <LCD_DisplayString+0x6a>
            break; // Wyjście z pętli, jeśli przekroczy wysokość ekranu
        }

        LCD_DisplayChar(Xstart, Ystart, *pString, Color);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	89b9      	ldrh	r1, [r7, #12]
 8000c72:	89f8      	ldrh	r0, [r7, #14]
 8000c74:	f7ff ff66 	bl	8000b44 <LCD_DisplayChar>
        pString++;
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
        Xstart += Font_Width;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	4413      	add	r3, r2
 8000c86:	81fb      	strh	r3, [r7, #14]
    while (*pString != '\0') {
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1db      	bne.n	8000c48 <LCD_DisplayString+0x20>
    }
}
 8000c90:	e000      	b.n	8000c94 <LCD_DisplayString+0x6c>
            break; // Wyjście z pętli, jeśli przekroczy wysokość ekranu
 8000c92:	bf00      	nop
}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <start_display>:

  int x = 10;
  int y = 10;

  void start_display()
  {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  	for(int i = 0; i <= 2; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	e023      	b.n	8000cf0 <start_display+0x54>
  	{
  	  new_data = i2c_get_ready_i2c_byte();
 8000ca8:	f7ff fd78 	bl	800079c <i2c_get_ready_i2c_byte>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a1e      	ldr	r2, [pc, #120]	@ (8000d28 <start_display+0x8c>)
 8000cb0:	6013      	str	r3, [r2, #0]
  	  sprintf(new_data_char, "Device address: 0x%X", new_data);
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <start_display+0x8c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	491c      	ldr	r1, [pc, #112]	@ (8000d2c <start_display+0x90>)
 8000cba:	481d      	ldr	r0, [pc, #116]	@ (8000d30 <start_display+0x94>)
 8000cbc:	f002 f9c6 	bl	800304c <siprintf>
  	 // fill_with(BLACK);
  	  LCD_DisplayString( x, y, new_data_char, WHITE);
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <start_display+0x98>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	b298      	uxth	r0, r3
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <start_display+0x9c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cd0:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <start_display+0x94>)
 8000cd2:	f7ff ffa9 	bl	8000c28 <LCD_DisplayString>
  	  y = y + 10;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <start_display+0x9c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	330a      	adds	r3, #10
 8000cdc:	4a16      	ldr	r2, [pc, #88]	@ (8000d38 <start_display+0x9c>)
 8000cde:	6013      	str	r3, [r2, #0]
  	  //LCD_DisplayString( 5, 5, device_address_char, WHITE);
  	 // LCD_DisplayString( 5, 15, register_address_char, WHITE);
  	 // LCD_DisplayString( 5, 25, iic_data_char, WHITE);
  	  lcd_copy();
 8000ce0:	f7ff ff0c 	bl	8000afc <lcd_copy>
  	  HAL_Delay(100);
 8000ce4:	2064      	movs	r0, #100	@ 0x64
 8000ce6:	f000 fb07 	bl	80012f8 <HAL_Delay>
  	for(int i = 0; i <= 2; i++)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	ddd8      	ble.n	8000ca8 <start_display+0xc>
  	}

  	i2c_reset_all();
 8000cf6:	f7ff fdb1 	bl	800085c <i2c_reset_all>
  	new_data = 0;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <start_display+0x8c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 30; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	e007      	b.n	8000d16 <start_display+0x7a>
  	{
  		new_data_char[i] = 0;
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <start_display+0x94>)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  	for(int i = 0; i < 30; i++)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b1d      	cmp	r3, #29
 8000d1a:	ddf4      	ble.n	8000d06 <start_display+0x6a>
  	}
  }
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000a58c 	.word	0x2000a58c
 8000d2c:	080039a4 	.word	0x080039a4
 8000d30:	2000a590 	.word	0x2000a590
 8000d34:	200002fc 	.word	0x200002fc
 8000d38:	20000300 	.word	0x20000300

08000d3c <HAL_GPIO_EXTI_Callback>:

  int start_display_flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d4c:	d028      	beq.n	8000da0 <HAL_GPIO_EXTI_Callback+0x64>
 8000d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d52:	dc2c      	bgt.n	8000dae <HAL_GPIO_EXTI_Callback+0x72>
 8000d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d58:	d015      	beq.n	8000d86 <HAL_GPIO_EXTI_Callback+0x4a>
 8000d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d5e:	dc26      	bgt.n	8000dae <HAL_GPIO_EXTI_Callback+0x72>
 8000d60:	2b80      	cmp	r3, #128	@ 0x80
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_EXTI_Callback+0x30>
 8000d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d68:	d006      	beq.n	8000d78 <HAL_GPIO_EXTI_Callback+0x3c>
			i2c_check_for_start();
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SDA_IT_FALLING_Pin);
		    break;

		default:
		    break;
 8000d6a:	e020      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x72>
			i2c_read_data();
 8000d6c:	f7ff fcd6 	bl	800071c <i2c_read_data>
		    __HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SCL_IT_RISING_Pin);
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	615a      	str	r2, [r3, #20]
		    break;
 8000d76:	e01b      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x74>
			i2c_scl_falling();
 8000d78:	f7ff fd64 	bl	8000844 <i2c_scl_falling>
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SCL_IT_FALLING_Pin);
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d82:	615a      	str	r2, [r3, #20]
		    break;
 8000d84:	e014      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x74>
			if(i2c_check_for_stop() == I2C_STOP)
 8000d86:	f7ff fd45 	bl	8000814 <i2c_check_for_stop>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <HAL_GPIO_EXTI_Callback+0x5a>
				start_display_flag = 1;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_GPIO_EXTI_Callback+0x80>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SDA_IT_RISING_Pin);
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9c:	615a      	str	r2, [r3, #20]
		    break;
 8000d9e:	e007      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x74>
			i2c_check_for_start();
 8000da0:	f7ff fd20 	bl	80007e4 <i2c_check_for_start>
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SDA_IT_FALLING_Pin);
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000da6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000daa:	615a      	str	r2, [r3, #20]
		    break;
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x74>
		    break;
 8000dae:	bf00      	nop
	}
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013c00 	.word	0x40013c00
 8000dbc:	2000a5b0 	.word	0x2000a5b0

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc4:	f000 fa26 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc8:	f000 f81a 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dcc:	f7ff fbe8 	bl	80005a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd0:	f7ff fbc6 	bl	8000560 <MX_DMA_Init>
  MX_SPI1_Init();
 8000dd4:	f000 f884 	bl	8000ee0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000dd8:	f7ff fdd6 	bl	8000988 <lcd_init>
  fill_with(BLACK);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fe6f 	bl	8000ac0 <fill_with>
  lcd_copy();
 8000de2:	f7ff fe8b 	bl	8000afc <lcd_copy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (start_display_flag == 1)
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <main+0x3c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d1fb      	bne.n	8000de6 <main+0x26>
	  {
		  start_display();
 8000dee:	f7ff ff55 	bl	8000c9c <start_display>
		  start_display_flag = 0;
 8000df2:	4b02      	ldr	r3, [pc, #8]	@ (8000dfc <main+0x3c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
	  if (start_display_flag == 1)
 8000df8:	e7f5      	b.n	8000de6 <main+0x26>
 8000dfa:	bf00      	nop
 8000dfc:	2000a5b0 	.word	0x2000a5b0

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	@ 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	@ 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 f93c 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <SystemClock_Config+0xcc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	4a27      	ldr	r2, [pc, #156]	@ (8000ecc <SystemClock_Config+0xcc>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e34:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e74:	23a8      	movs	r3, #168	@ 0xa8
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 f8c3 	bl	8002010 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e90:	f000 f820 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fb24 	bl	8002500 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ebe:	f000 f809 	bl	8000ed4 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	@ 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <Error_Handler+0x8>

08000ee0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <MX_SPI1_Init+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000eec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f32:	f001 fc91 	bl	8002858 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f7ff ffca 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000a5b4 	.word	0x2000a5b4
 8000f48:	40013000 	.word	0x40013000

08000f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a30      	ldr	r2, [pc, #192]	@ (800102c <HAL_SPI_MspInit+0xe0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d159      	bne.n	8001022 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <HAL_SPI_MspInit+0xe4>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a2e      	ldr	r2, [pc, #184]	@ (8001030 <HAL_SPI_MspInit+0xe4>)
 8000f78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <HAL_SPI_MspInit+0xe4>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <HAL_SPI_MspInit+0xe4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <HAL_SPI_MspInit+0xe4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <HAL_SPI_MspInit+0xe4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SPI1_SCK_Pin|LCD_SPI1_MOSI_Pin;
 8000fa6:	23a0      	movs	r3, #160	@ 0xa0
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481c      	ldr	r0, [pc, #112]	@ (8001034 <HAL_SPI_MspInit+0xe8>)
 8000fc2:	f000 fe3f 	bl	8001c44 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800103c <HAL_SPI_MspInit+0xf0>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000fce:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000fd2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000fd6:	2240      	movs	r2, #64	@ 0x40
 8000fd8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000fe2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001006:	480c      	ldr	r0, [pc, #48]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 8001008:	f000 faac 	bl	8001564 <HAL_DMA_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001012:	f7ff ff5f 	bl	8000ed4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 800101a:	649a      	str	r2, [r3, #72]	@ 0x48
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_SPI_MspInit+0xec>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	@ 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013000 	.word	0x40013000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000
 8001038:	2000a60c 	.word	0x2000a60c
 800103c:	40026458 	.word	0x40026458

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <HAL_MspInit+0x4c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x4c>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 f8e7 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SCL_IT_RISING_Pin);
 80010f2:	2080      	movs	r0, #128	@ 0x80
 80010f4:	f000 ff74 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SCL_IT_FALLING_Pin);
 80010f8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80010fc:	f000 ff70 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SDA_IT_RISING_Pin);
 8001108:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800110c:	f000 ff68 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SDA_IT_FALLING_Pin);
 8001110:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001114:	f000 ff64 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <DMA2_Stream3_IRQHandler+0x10>)
 8001122:	f000 fb25 	bl	8001770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000a60c 	.word	0x2000a60c

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001160:	f001 ff9c 	bl	800309c <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20020000 	.word	0x20020000
 8001190:	00000400 	.word	0x00000400
 8001194:	2000a66c 	.word	0x2000a66c
 8001198:	2000a7c0 	.word	0x2000a7c0

0800119c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011c4:	f7ff ffea 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	@ (8001200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	@ (800120c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f001 ff5b 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fde5 	bl	8000dc0 <main>
  bx  lr    
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8001204:	08003ab0 	.word	0x08003ab0
  ldr r2, =_sbss
 8001208:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 800120c:	2000a7bc 	.word	0x2000a7bc

08001210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0d      	ldr	r2, [pc, #52]	@ (8001254 <HAL_Init+0x40>)
 800121e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001224:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <HAL_Init+0x40>)
 800122a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <HAL_Init+0x40>)
 8001236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 f94f 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f808 	bl	8001258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff fefa 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023c00 	.word	0x40023c00

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_InitTick+0x54>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_InitTick+0x58>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f967 	bl	800154a <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f000 f92f 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	@ (80012b4 <HAL_InitTick+0x5c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000304 	.word	0x20000304
 80012b0:	2000030c 	.word	0x2000030c
 80012b4:	20000308 	.word	0x20000308

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2000030c 	.word	0x2000030c
 80012dc:	2000a670 	.word	0x2000a670

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2000a670 	.word	0x2000a670

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff ffee 	bl	80012e0 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_Delay+0x44>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffde 	bl	80012e0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000030c 	.word	0x2000030c

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	@ (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	@ (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff29 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff3e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff31 	bl	80013a4 <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff feb6 	bl	80012e0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e099      	b.n	80016b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a0:	e00f      	b.n	80015c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015a2:	f7ff fe9d 	bl	80012e0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d908      	bls.n	80015c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2220      	movs	r2, #32
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2203      	movs	r2, #3
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e078      	b.n	80016b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1e8      	bne.n	80015a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <HAL_DMA_Init+0x158>)
 80015dc:	4013      	ands	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	2b04      	cmp	r3, #4
 800161a:	d107      	bne.n	800162c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	4313      	orrs	r3, r2
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f023 0307 	bic.w	r3, r3, #7
 8001642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	4313      	orrs	r3, r2
 800164c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	2b04      	cmp	r3, #4
 8001654:	d117      	bne.n	8001686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4313      	orrs	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00e      	beq.n	8001686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa6f 	bl	8001b4c <DMA_CheckFifoParam>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2240      	movs	r2, #64	@ 0x40
 8001678:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001682:	2301      	movs	r3, #1
 8001684:	e016      	b.n	80016b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fa26 	bl	8001ae0 <DMA_CalcBaseAndBitshift>
 8001694:	4603      	mov	r3, r0
 8001696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169c:	223f      	movs	r2, #63	@ 0x3f
 800169e:	409a      	lsls	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	f010803f 	.word	0xf010803f

080016c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_DMA_Start_IT+0x26>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e040      	b.n	8001768 <HAL_DMA_Start_IT+0xa8>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d12f      	bne.n	800175a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2202      	movs	r2, #2
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f9b8 	bl	8001a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	223f      	movs	r2, #63	@ 0x3f
 800171a:	409a      	lsls	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0216 	orr.w	r2, r2, #22
 800172e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0208 	orr.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e005      	b.n	8001766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001762:	2302      	movs	r3, #2
 8001764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001766:	7dfb      	ldrb	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800177c:	4b8e      	ldr	r3, [pc, #568]	@ (80019b8 <HAL_DMA_IRQHandler+0x248>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a8e      	ldr	r2, [pc, #568]	@ (80019bc <HAL_DMA_IRQHandler+0x24c>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0a9b      	lsrs	r3, r3, #10
 8001788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	2208      	movs	r2, #8
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01a      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c8:	2208      	movs	r2, #8
 80017ca:	409a      	lsls	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d012      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fe:	2201      	movs	r2, #1
 8001800:	409a      	lsls	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180a:	f043 0202 	orr.w	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001816:	2204      	movs	r2, #4
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001834:	2204      	movs	r2, #4
 8001836:	409a      	lsls	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	f043 0204 	orr.w	r2, r3, #4
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184c:	2210      	movs	r2, #16
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d043      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03c      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186a:	2210      	movs	r2, #16
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d018      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d024      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
 800189e:	e01f      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
 80018b0:	e016      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0208 	bic.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	2220      	movs	r2, #32
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 808f 	beq.w	8001a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8087 	beq.w	8001a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001906:	2220      	movs	r2, #32
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b05      	cmp	r3, #5
 8001918:	d136      	bne.n	8001988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0216 	bic.w	r2, r2, #22
 8001928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <HAL_DMA_IRQHandler+0x1da>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0208 	bic.w	r2, r2, #8
 8001958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195e:	223f      	movs	r2, #63	@ 0x3f
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197a:	2b00      	cmp	r3, #0
 800197c:	d07e      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
        }
        return;
 8001986:	e079      	b.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01d      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d031      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
 80019b4:	e02c      	b.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
 80019b6:	bf00      	nop
 80019b8:	20000304 	.word	0x20000304
 80019bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
 80019d0:	e01e      	b.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0210 	bic.w	r2, r2, #16
 80019ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d032      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d022      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2205      	movs	r2, #5
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d307      	bcc.n	8001a58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f2      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x2cc>
 8001a56:	e000      	b.n	8001a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
 8001a7a:	e000      	b.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a7c:	bf00      	nop
    }
  }
}
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b40      	cmp	r3, #64	@ 0x40
 8001ab0:	d108      	bne.n	8001ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ac2:	e007      	b.n	8001ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3b10      	subs	r3, #16
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <DMA_CalcBaseAndBitshift+0x64>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001afa:	4a13      	ldr	r2, [pc, #76]	@ (8001b48 <DMA_CalcBaseAndBitshift+0x68>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d909      	bls.n	8001b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b20:	e007      	b.n	8001b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	aaaaaaab 	.word	0xaaaaaaab
 8001b48:	08003a64 	.word	0x08003a64

08001b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11f      	bne.n	8001ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d856      	bhi.n	8001c1a <DMA_CheckFifoParam+0xce>
 8001b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b74 <DMA_CheckFifoParam+0x28>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b97 	.word	0x08001b97
 8001b7c:	08001b85 	.word	0x08001b85
 8001b80:	08001c1b 	.word	0x08001c1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d046      	beq.n	8001c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b94:	e043      	b.n	8001c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b9e:	d140      	bne.n	8001c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba4:	e03d      	b.n	8001c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bae:	d121      	bne.n	8001bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d837      	bhi.n	8001c26 <DMA_CheckFifoParam+0xda>
 8001bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <DMA_CheckFifoParam+0x70>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd3 	.word	0x08001bd3
 8001bc4:	08001bcd 	.word	0x08001bcd
 8001bc8:	08001be5 	.word	0x08001be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd0:	e030      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d025      	beq.n	8001c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be2:	e022      	b.n	8001c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bec:	d11f      	bne.n	8001c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bf2:	e01c      	b.n	8001c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d903      	bls.n	8001c02 <DMA_CheckFifoParam+0xb6>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d003      	beq.n	8001c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c00:	e018      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
      break;
 8001c06:	e015      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      break;
 8001c18:	e00b      	b.n	8001c32 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e00a      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e008      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e006      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e004      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e002      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c2e:	bf00      	nop
 8001c30:	e000      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
    }
  } 
  
  return status; 
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e16b      	b.n	8001f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 815a 	bne.w	8001f32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80b4 	beq.w	8001f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b60      	ldr	r3, [pc, #384]	@ (8001f50 <HAL_GPIO_Init+0x30c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f50 <HAL_GPIO_Init+0x30c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dda:	4b5d      	ldr	r3, [pc, #372]	@ (8001f50 <HAL_GPIO_Init+0x30c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f54 <HAL_GPIO_Init+0x310>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	@ (8001f58 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d02b      	beq.n	8001e6a <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a51      	ldr	r2, [pc, #324]	@ (8001f5c <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d025      	beq.n	8001e66 <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a50      	ldr	r2, [pc, #320]	@ (8001f60 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01f      	beq.n	8001e62 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4f      	ldr	r2, [pc, #316]	@ (8001f64 <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x21a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f68 <HAL_GPIO_Init+0x324>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x216>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4d      	ldr	r2, [pc, #308]	@ (8001f6c <HAL_GPIO_Init+0x328>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x212>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x20a>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e00e      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e4e:	2308      	movs	r3, #8
 8001e50:	e00c      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e00a      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e56:	2305      	movs	r3, #5
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7c:	4935      	ldr	r1, [pc, #212]	@ (8001f54 <HAL_GPIO_Init+0x310>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eae:	4a32      	ldr	r2, [pc, #200]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed8:	4a27      	ldr	r2, [pc, #156]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ede:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f02:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f2c:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	f67f ae90 	bls.w	8001c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3724      	adds	r7, #36	@ 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40021400 	.word	0x40021400
 8001f70:	40021800 	.word	0x40021800
 8001f74:	40021c00 	.word	0x40021c00
 8001f78:	40013c00 	.word	0x40013c00

08001f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fe9c 	bl	8000d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e267      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d075      	beq.n	800211a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202e:	4b88      	ldr	r3, [pc, #544]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b04      	cmp	r3, #4
 8002038:	d00c      	beq.n	8002054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203a:	4b85      	ldr	r3, [pc, #532]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002042:	2b08      	cmp	r3, #8
 8002044:	d112      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4b82      	ldr	r3, [pc, #520]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800204e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b7e      	ldr	r3, [pc, #504]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d05b      	beq.n	8002118 <HAL_RCC_OscConfig+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d157      	bne.n	8002118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e242      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x74>
 8002076:	4b76      	ldr	r3, [pc, #472]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a75      	ldr	r2, [pc, #468]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b70      	ldr	r3, [pc, #448]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6f      	ldr	r2, [pc, #444]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b6d      	ldr	r3, [pc, #436]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a6c      	ldr	r2, [pc, #432]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 80020a8:	4b69      	ldr	r3, [pc, #420]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a68      	ldr	r2, [pc, #416]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b66      	ldr	r3, [pc, #408]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a65      	ldr	r2, [pc, #404]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff f90a 	bl	80012e0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f906 	bl	80012e0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e207      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0xc0>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff f8f6 	bl	80012e0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f8f2 	bl	80012e0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	@ 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1f3      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	4b51      	ldr	r3, [pc, #324]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe8>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d063      	beq.n	80021ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002126:	4b4a      	ldr	r3, [pc, #296]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b47      	ldr	r3, [pc, #284]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213a:	2b08      	cmp	r3, #8
 800213c:	d11c      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1c7      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4937      	ldr	r1, [pc, #220]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e03a      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b34      	ldr	r3, [pc, #208]	@ (8002254 <HAL_RCC_OscConfig+0x244>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff f8ab 	bl	80012e0 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff f8a7 	bl	80012e0 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1a8      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4925      	ldr	r1, [pc, #148]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_RCC_OscConfig+0x244>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f88a 	bl	80012e0 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d0:	f7ff f886 	bl	80012e0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e187      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d036      	beq.n	8002268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <HAL_RCC_OscConfig+0x248>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f86a 	bl	80012e0 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff f866 	bl	80012e0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e167      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <HAL_RCC_OscConfig+0x240>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x200>
 800222e:	e01b      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_RCC_OscConfig+0x248>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff f853 	bl	80012e0 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	e00e      	b.n	800225c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223e:	f7ff f84f 	bl	80012e0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d907      	bls.n	800225c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e150      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
 8002250:	40023800 	.word	0x40023800
 8002254:	42470000 	.word	0x42470000
 8002258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b88      	ldr	r3, [pc, #544]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800225e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ea      	bne.n	800223e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8097 	beq.w	80023a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b81      	ldr	r3, [pc, #516]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b7d      	ldr	r3, [pc, #500]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	4a7c      	ldr	r2, [pc, #496]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	@ 0x40
 8002296:	4b7a      	ldr	r3, [pc, #488]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b77      	ldr	r3, [pc, #476]	@ (8002484 <HAL_RCC_OscConfig+0x474>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b74      	ldr	r3, [pc, #464]	@ (8002484 <HAL_RCC_OscConfig+0x474>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a73      	ldr	r2, [pc, #460]	@ (8002484 <HAL_RCC_OscConfig+0x474>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7ff f80f 	bl	80012e0 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7ff f80b 	bl	80012e0 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e10c      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <HAL_RCC_OscConfig+0x474>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x2ea>
 80022ec:	4b64      	ldr	r3, [pc, #400]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a63      	ldr	r2, [pc, #396]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x324>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x30c>
 8002302:	4b5f      	ldr	r3, [pc, #380]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	4a5e      	ldr	r2, [pc, #376]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	@ 0x70
 800230e:	4b5c      	ldr	r3, [pc, #368]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	4a5b      	ldr	r2, [pc, #364]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	@ 0x70
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x324>
 800231c:	4b58      	ldr	r3, [pc, #352]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	4a57      	ldr	r2, [pc, #348]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	@ 0x70
 8002328:	4b55      	ldr	r3, [pc, #340]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232c:	4a54      	ldr	r2, [pc, #336]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe ffd0 	bl	80012e0 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe ffcc 	bl	80012e0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0cb      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0ee      	beq.n	8002344 <HAL_RCC_OscConfig+0x334>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7fe ffba 	bl	80012e0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe ffb6 	bl	80012e0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0b5      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ee      	bne.n	8002370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4a38      	ldr	r2, [pc, #224]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a1 	beq.w	80024f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ae:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d05c      	beq.n	8002474 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d141      	bne.n	8002446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <HAL_RCC_OscConfig+0x478>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe ff8a 	bl	80012e0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe ff86 	bl	80012e0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e087      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	3b01      	subs	r3, #1
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	491b      	ldr	r1, [pc, #108]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <HAL_RCC_OscConfig+0x478>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7fe ff5f 	bl	80012e0 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002426:	f7fe ff5b 	bl	80012e0 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e05c      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x416>
 8002444:	e054      	b.n	80024f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <HAL_RCC_OscConfig+0x478>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe ff48 	bl	80012e0 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe ff44 	bl	80012e0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e045      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_RCC_OscConfig+0x470>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x444>
 8002472:	e03d      	b.n	80024f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e038      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
 8002480:	40023800 	.word	0x40023800
 8002484:	40007000 	.word	0x40007000
 8002488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800248c:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <HAL_RCC_OscConfig+0x4ec>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d028      	beq.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d121      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d11a      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d111      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	3b01      	subs	r3, #1
 80024d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0cc      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b68      	ldr	r3, [pc, #416]	@ (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d90c      	bls.n	800253c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b65      	ldr	r3, [pc, #404]	@ (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b63      	ldr	r3, [pc, #396]	@ (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0b8      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002554:	4b59      	ldr	r3, [pc, #356]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a58      	ldr	r2, [pc, #352]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800255e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800256c:	4b53      	ldr	r3, [pc, #332]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a52      	ldr	r2, [pc, #328]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b50      	ldr	r3, [pc, #320]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	494d      	ldr	r1, [pc, #308]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d044      	beq.n	8002620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b47      	ldr	r3, [pc, #284]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d119      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d003      	beq.n	80025be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025be:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e067      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b37      	ldr	r3, [pc, #220]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4934      	ldr	r1, [pc, #208]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe fe76 	bl	80012e0 <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe fe72 	bl	80012e0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e04f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b2b      	ldr	r3, [pc, #172]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b25      	ldr	r3, [pc, #148]	@ (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d20c      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b22      	ldr	r3, [pc, #136]	@ (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e032      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4916      	ldr	r1, [pc, #88]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	490e      	ldr	r1, [pc, #56]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002686:	f000 f821 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800268a:	4602      	mov	r2, r0
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	490a      	ldr	r1, [pc, #40]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fdd6 	bl	8001258 <HAL_InitTick>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08003a54 	.word	0x08003a54
 80026c4:	20000304 	.word	0x20000304
 80026c8:	20000308 	.word	0x20000308

080026cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d0:	b090      	sub	sp, #64	@ 0x40
 80026d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d8:	2300      	movs	r3, #0
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e4:	4b59      	ldr	r3, [pc, #356]	@ (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d00d      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x40>
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	f200 80a1 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x16c>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x34>
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x3a>
 80026fe:	e09b      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b53      	ldr	r3, [pc, #332]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x184>)
 8002702:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002704:	e09b      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002706:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x188>)
 8002708:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800270a:	e098      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800270c:	4b4f      	ldr	r3, [pc, #316]	@ (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002716:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d028      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002722:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	2200      	movs	r2, #0
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	627a      	str	r2, [r7, #36]	@ 0x24
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002734:	2100      	movs	r1, #0
 8002736:	4b47      	ldr	r3, [pc, #284]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x188>)
 8002738:	fb03 f201 	mul.w	r2, r3, r1
 800273c:	2300      	movs	r3, #0
 800273e:	fb00 f303 	mul.w	r3, r0, r3
 8002742:	4413      	add	r3, r2
 8002744:	4a43      	ldr	r2, [pc, #268]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x188>)
 8002746:	fba0 1202 	umull	r1, r2, r0, r2
 800274a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800274c:	460a      	mov	r2, r1
 800274e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002752:	4413      	add	r3, r2
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002758:	2200      	movs	r2, #0
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	61fa      	str	r2, [r7, #28]
 800275e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002762:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002766:	f7fd fd83 	bl	8000270 <__aeabi_uldivmod>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4613      	mov	r3, r2
 8002770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002772:	e053      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	2200      	movs	r2, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	617a      	str	r2, [r7, #20]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002786:	f04f 0b00 	mov.w	fp, #0
 800278a:	4652      	mov	r2, sl
 800278c:	465b      	mov	r3, fp
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	0159      	lsls	r1, r3, #5
 8002798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279c:	0150      	lsls	r0, r2, #5
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	ebb2 080a 	subs.w	r8, r2, sl
 80027a6:	eb63 090b 	sbc.w	r9, r3, fp
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027be:	ebb2 0408 	subs.w	r4, r2, r8
 80027c2:	eb63 0509 	sbc.w	r5, r3, r9
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	00eb      	lsls	r3, r5, #3
 80027d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d4:	00e2      	lsls	r2, r4, #3
 80027d6:	4614      	mov	r4, r2
 80027d8:	461d      	mov	r5, r3
 80027da:	eb14 030a 	adds.w	r3, r4, sl
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	eb45 030b 	adc.w	r3, r5, fp
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f2:	4629      	mov	r1, r5
 80027f4:	028b      	lsls	r3, r1, #10
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027fc:	4621      	mov	r1, r4
 80027fe:	028a      	lsls	r2, r1, #10
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002806:	2200      	movs	r2, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	60fa      	str	r2, [r7, #12]
 800280c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002810:	f7fd fd2e 	bl	8000270 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800282c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x184>)
 800283a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002840:	4618      	mov	r0, r3
 8002842:	3740      	adds	r7, #64	@ 0x40
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	017d7840 	.word	0x017d7840

08002858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07b      	b.n	8002962 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800287a:	d009      	beq.n	8002890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
 8002882:	e005      	b.n	8002890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fb4e 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002914:	ea42 0103 	orr.w	r1, r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	f003 0104 	and.w	r1, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	f003 0210 	and.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b088      	sub	sp, #32
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_SPI_Transmit+0x22>
 8002988:	2302      	movs	r3, #2
 800298a:	e12d      	b.n	8002be8 <HAL_SPI_Transmit+0x27e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002994:	f7fe fca4 	bl	80012e0 <HAL_GetTick>
 8002998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ae:	e116      	b.n	8002bde <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Transmit+0x52>
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c0:	e10d      	b.n	8002bde <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a08:	d10f      	bne.n	8002a2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a34:	2b40      	cmp	r3, #64	@ 0x40
 8002a36:	d007      	beq.n	8002a48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a50:	d14f      	bne.n	8002af2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_SPI_Transmit+0xf6>
 8002a5a:	8afb      	ldrh	r3, [r7, #22]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d142      	bne.n	8002ae6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	881a      	ldrh	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a84:	e02f      	b.n	8002ae6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d112      	bne.n	8002aba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ab8:	e015      	b.n	8002ae6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aba:	f7fe fc11 	bl	80012e0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d803      	bhi.n	8002ad2 <HAL_SPI_Transmit+0x168>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d102      	bne.n	8002ad8 <HAL_SPI_Transmit+0x16e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ae4:	e07b      	b.n	8002bde <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ca      	bne.n	8002a86 <HAL_SPI_Transmit+0x11c>
 8002af0:	e050      	b.n	8002b94 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Transmit+0x196>
 8002afa:	8afb      	ldrh	r3, [r7, #22]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d144      	bne.n	8002b8a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	7812      	ldrb	r2, [r2, #0]
 8002b0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b26:	e030      	b.n	8002b8a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d113      	bne.n	8002b5e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b5c:	e015      	b.n	8002b8a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5e:	f7fe fbbf 	bl	80012e0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d803      	bhi.n	8002b76 <HAL_SPI_Transmit+0x20c>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d102      	bne.n	8002b7c <HAL_SPI_Transmit+0x212>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002b88:	e029      	b.n	8002bde <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1c9      	bne.n	8002b28 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fa03 	bl	8002fa4 <SPI_EndRxTxTransaction>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e003      	b.n	8002bde <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_SPI_Transmit_DMA+0x20>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e097      	b.n	8002d40 <HAL_SPI_Transmit_DMA+0x150>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d002      	beq.n	8002c2a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c28:	e085      	b.n	8002d36 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_SPI_Transmit_DMA+0x46>
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c3a:	e07c      	b.n	8002d36 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c82:	d10f      	bne.n	8002ca4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ca2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca8:	4a27      	ldr	r2, [pc, #156]	@ (8002d48 <HAL_SPI_Transmit_DMA+0x158>)
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb0:	4a26      	ldr	r2, [pc, #152]	@ (8002d4c <HAL_SPI_Transmit_DMA+0x15c>)
 8002cb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb8:	4a25      	ldr	r2, [pc, #148]	@ (8002d50 <HAL_SPI_Transmit_DMA+0x160>)
 8002cba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	4619      	mov	r1, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cda:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002cdc:	f7fe fcf0 	bl	80016c0 <HAL_DMA_Start_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002cf6:	e01e      	b.n	8002d36 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	2b40      	cmp	r3, #64	@ 0x40
 8002d04:	d007      	beq.n	8002d16 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0202 	orr.w	r2, r2, #2
 8002d34:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	08002e39 	.word	0x08002e39
 8002d4c:	08002d91 	.word	0x08002d91
 8002d50:	08002e55 	.word	0x08002e55

08002d54 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9e:	f7fe fa9f 	bl	80012e0 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db2:	d03b      	beq.n	8002e2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0220 	bic.w	r2, r2, #32
 8002dc2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0202 	bic.w	r2, r2, #2
 8002dd2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	2164      	movs	r1, #100	@ 0x64
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f000 f8e3 	bl	8002fa4 <SPI_EndRxTxTransaction>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002e24:	6978      	ldr	r0, [r7, #20]
 8002e26:	f7ff ffa9 	bl	8002d7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002e2a:	e002      	b.n	8002e32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002e2c:	6978      	ldr	r0, [r7, #20]
 8002e2e:	f7ff ff91 	bl	8002d54 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff ff8e 	bl	8002d68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0203 	bic.w	r2, r2, #3
 8002e70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff ff78 	bl	8002d7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ea4:	f7fe fa1c 	bl	80012e0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eb4:	f7fe fa14 	bl	80012e0 <HAL_GetTick>
 8002eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eba:	4b39      	ldr	r3, [pc, #228]	@ (8002fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	015b      	lsls	r3, r3, #5
 8002ec0:	0d1b      	lsrs	r3, r3, #20
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eca:	e054      	b.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d050      	beq.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed4:	f7fe fa04 	bl	80012e0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d902      	bls.n	8002eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d13d      	bne.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f02:	d111      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f0c:	d004      	beq.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f16:	d107      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f30:	d10f      	bne.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e017      	b.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d19b      	bne.n	8002ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000304 	.word	0x20000304

08002fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2102      	movs	r1, #2
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ff6a 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e032      	b.n	800303c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <SPI_EndRxTxTransaction+0xa0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1b      	ldr	r2, [pc, #108]	@ (8003048 <SPI_EndRxTxTransaction+0xa4>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ff4:	d112      	bne.n	800301c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2180      	movs	r1, #128	@ 0x80
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ff47 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d016      	beq.n	800303a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e00f      	b.n	800303c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3b01      	subs	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003032:	2b80      	cmp	r3, #128	@ 0x80
 8003034:	d0f2      	beq.n	800301c <SPI_EndRxTxTransaction+0x78>
 8003036:	e000      	b.n	800303a <SPI_EndRxTxTransaction+0x96>
        break;
 8003038:	bf00      	nop
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000304 	.word	0x20000304
 8003048:	165e9f81 	.word	0x165e9f81

0800304c <siprintf>:
 800304c:	b40e      	push	{r1, r2, r3}
 800304e:	b500      	push	{lr}
 8003050:	b09c      	sub	sp, #112	@ 0x70
 8003052:	ab1d      	add	r3, sp, #116	@ 0x74
 8003054:	9002      	str	r0, [sp, #8]
 8003056:	9006      	str	r0, [sp, #24]
 8003058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800305c:	4809      	ldr	r0, [pc, #36]	@ (8003084 <siprintf+0x38>)
 800305e:	9107      	str	r1, [sp, #28]
 8003060:	9104      	str	r1, [sp, #16]
 8003062:	4909      	ldr	r1, [pc, #36]	@ (8003088 <siprintf+0x3c>)
 8003064:	f853 2b04 	ldr.w	r2, [r3], #4
 8003068:	9105      	str	r1, [sp, #20]
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	a902      	add	r1, sp, #8
 8003070:	f000 f994 	bl	800339c <_svfiprintf_r>
 8003074:	9b02      	ldr	r3, [sp, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	b01c      	add	sp, #112	@ 0x70
 800307c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003080:	b003      	add	sp, #12
 8003082:	4770      	bx	lr
 8003084:	20000310 	.word	0x20000310
 8003088:	ffff0208 	.word	0xffff0208

0800308c <memset>:
 800308c:	4402      	add	r2, r0
 800308e:	4603      	mov	r3, r0
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	f803 1b01 	strb.w	r1, [r3], #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <__errno>:
 800309c:	4b01      	ldr	r3, [pc, #4]	@ (80030a4 <__errno+0x8>)
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000310 	.word	0x20000310

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4d0d      	ldr	r5, [pc, #52]	@ (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2600      	movs	r6, #0
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4d0b      	ldr	r5, [pc, #44]	@ (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	@ (80030ec <__libc_init_array+0x44>)
 80030bc:	f000 fc66 	bl	800398c <_init>
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2600      	movs	r6, #0
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08003aa8 	.word	0x08003aa8
 80030e4:	08003aa8 	.word	0x08003aa8
 80030e8:	08003aa8 	.word	0x08003aa8
 80030ec:	08003aac 	.word	0x08003aac

080030f0 <__retarget_lock_acquire_recursive>:
 80030f0:	4770      	bx	lr

080030f2 <__retarget_lock_release_recursive>:
 80030f2:	4770      	bx	lr

080030f4 <_free_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4605      	mov	r5, r0
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d041      	beq.n	8003180 <_free_r+0x8c>
 80030fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003100:	1f0c      	subs	r4, r1, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	bfb8      	it	lt
 8003106:	18e4      	addlt	r4, r4, r3
 8003108:	f000 f8e0 	bl	80032cc <__malloc_lock>
 800310c:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <_free_r+0x90>)
 800310e:	6813      	ldr	r3, [r2, #0]
 8003110:	b933      	cbnz	r3, 8003120 <_free_r+0x2c>
 8003112:	6063      	str	r3, [r4, #4]
 8003114:	6014      	str	r4, [r2, #0]
 8003116:	4628      	mov	r0, r5
 8003118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800311c:	f000 b8dc 	b.w	80032d8 <__malloc_unlock>
 8003120:	42a3      	cmp	r3, r4
 8003122:	d908      	bls.n	8003136 <_free_r+0x42>
 8003124:	6820      	ldr	r0, [r4, #0]
 8003126:	1821      	adds	r1, r4, r0
 8003128:	428b      	cmp	r3, r1
 800312a:	bf01      	itttt	eq
 800312c:	6819      	ldreq	r1, [r3, #0]
 800312e:	685b      	ldreq	r3, [r3, #4]
 8003130:	1809      	addeq	r1, r1, r0
 8003132:	6021      	streq	r1, [r4, #0]
 8003134:	e7ed      	b.n	8003112 <_free_r+0x1e>
 8003136:	461a      	mov	r2, r3
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	b10b      	cbz	r3, 8003140 <_free_r+0x4c>
 800313c:	42a3      	cmp	r3, r4
 800313e:	d9fa      	bls.n	8003136 <_free_r+0x42>
 8003140:	6811      	ldr	r1, [r2, #0]
 8003142:	1850      	adds	r0, r2, r1
 8003144:	42a0      	cmp	r0, r4
 8003146:	d10b      	bne.n	8003160 <_free_r+0x6c>
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	4401      	add	r1, r0
 800314c:	1850      	adds	r0, r2, r1
 800314e:	4283      	cmp	r3, r0
 8003150:	6011      	str	r1, [r2, #0]
 8003152:	d1e0      	bne.n	8003116 <_free_r+0x22>
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	6053      	str	r3, [r2, #4]
 800315a:	4408      	add	r0, r1
 800315c:	6010      	str	r0, [r2, #0]
 800315e:	e7da      	b.n	8003116 <_free_r+0x22>
 8003160:	d902      	bls.n	8003168 <_free_r+0x74>
 8003162:	230c      	movs	r3, #12
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	e7d6      	b.n	8003116 <_free_r+0x22>
 8003168:	6820      	ldr	r0, [r4, #0]
 800316a:	1821      	adds	r1, r4, r0
 800316c:	428b      	cmp	r3, r1
 800316e:	bf04      	itt	eq
 8003170:	6819      	ldreq	r1, [r3, #0]
 8003172:	685b      	ldreq	r3, [r3, #4]
 8003174:	6063      	str	r3, [r4, #4]
 8003176:	bf04      	itt	eq
 8003178:	1809      	addeq	r1, r1, r0
 800317a:	6021      	streq	r1, [r4, #0]
 800317c:	6054      	str	r4, [r2, #4]
 800317e:	e7ca      	b.n	8003116 <_free_r+0x22>
 8003180:	bd38      	pop	{r3, r4, r5, pc}
 8003182:	bf00      	nop
 8003184:	2000a7b8 	.word	0x2000a7b8

08003188 <sbrk_aligned>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4e0f      	ldr	r6, [pc, #60]	@ (80031c8 <sbrk_aligned+0x40>)
 800318c:	460c      	mov	r4, r1
 800318e:	6831      	ldr	r1, [r6, #0]
 8003190:	4605      	mov	r5, r0
 8003192:	b911      	cbnz	r1, 800319a <sbrk_aligned+0x12>
 8003194:	f000 fba6 	bl	80038e4 <_sbrk_r>
 8003198:	6030      	str	r0, [r6, #0]
 800319a:	4621      	mov	r1, r4
 800319c:	4628      	mov	r0, r5
 800319e:	f000 fba1 	bl	80038e4 <_sbrk_r>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	d103      	bne.n	80031ae <sbrk_aligned+0x26>
 80031a6:	f04f 34ff 	mov.w	r4, #4294967295
 80031aa:	4620      	mov	r0, r4
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
 80031ae:	1cc4      	adds	r4, r0, #3
 80031b0:	f024 0403 	bic.w	r4, r4, #3
 80031b4:	42a0      	cmp	r0, r4
 80031b6:	d0f8      	beq.n	80031aa <sbrk_aligned+0x22>
 80031b8:	1a21      	subs	r1, r4, r0
 80031ba:	4628      	mov	r0, r5
 80031bc:	f000 fb92 	bl	80038e4 <_sbrk_r>
 80031c0:	3001      	adds	r0, #1
 80031c2:	d1f2      	bne.n	80031aa <sbrk_aligned+0x22>
 80031c4:	e7ef      	b.n	80031a6 <sbrk_aligned+0x1e>
 80031c6:	bf00      	nop
 80031c8:	2000a7b4 	.word	0x2000a7b4

080031cc <_malloc_r>:
 80031cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d0:	1ccd      	adds	r5, r1, #3
 80031d2:	f025 0503 	bic.w	r5, r5, #3
 80031d6:	3508      	adds	r5, #8
 80031d8:	2d0c      	cmp	r5, #12
 80031da:	bf38      	it	cc
 80031dc:	250c      	movcc	r5, #12
 80031de:	2d00      	cmp	r5, #0
 80031e0:	4606      	mov	r6, r0
 80031e2:	db01      	blt.n	80031e8 <_malloc_r+0x1c>
 80031e4:	42a9      	cmp	r1, r5
 80031e6:	d904      	bls.n	80031f2 <_malloc_r+0x26>
 80031e8:	230c      	movs	r3, #12
 80031ea:	6033      	str	r3, [r6, #0]
 80031ec:	2000      	movs	r0, #0
 80031ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032c8 <_malloc_r+0xfc>
 80031f6:	f000 f869 	bl	80032cc <__malloc_lock>
 80031fa:	f8d8 3000 	ldr.w	r3, [r8]
 80031fe:	461c      	mov	r4, r3
 8003200:	bb44      	cbnz	r4, 8003254 <_malloc_r+0x88>
 8003202:	4629      	mov	r1, r5
 8003204:	4630      	mov	r0, r6
 8003206:	f7ff ffbf 	bl	8003188 <sbrk_aligned>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	4604      	mov	r4, r0
 800320e:	d158      	bne.n	80032c2 <_malloc_r+0xf6>
 8003210:	f8d8 4000 	ldr.w	r4, [r8]
 8003214:	4627      	mov	r7, r4
 8003216:	2f00      	cmp	r7, #0
 8003218:	d143      	bne.n	80032a2 <_malloc_r+0xd6>
 800321a:	2c00      	cmp	r4, #0
 800321c:	d04b      	beq.n	80032b6 <_malloc_r+0xea>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	4639      	mov	r1, r7
 8003222:	4630      	mov	r0, r6
 8003224:	eb04 0903 	add.w	r9, r4, r3
 8003228:	f000 fb5c 	bl	80038e4 <_sbrk_r>
 800322c:	4581      	cmp	r9, r0
 800322e:	d142      	bne.n	80032b6 <_malloc_r+0xea>
 8003230:	6821      	ldr	r1, [r4, #0]
 8003232:	1a6d      	subs	r5, r5, r1
 8003234:	4629      	mov	r1, r5
 8003236:	4630      	mov	r0, r6
 8003238:	f7ff ffa6 	bl	8003188 <sbrk_aligned>
 800323c:	3001      	adds	r0, #1
 800323e:	d03a      	beq.n	80032b6 <_malloc_r+0xea>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	442b      	add	r3, r5
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	f8d8 3000 	ldr.w	r3, [r8]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	bb62      	cbnz	r2, 80032a8 <_malloc_r+0xdc>
 800324e:	f8c8 7000 	str.w	r7, [r8]
 8003252:	e00f      	b.n	8003274 <_malloc_r+0xa8>
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	1b52      	subs	r2, r2, r5
 8003258:	d420      	bmi.n	800329c <_malloc_r+0xd0>
 800325a:	2a0b      	cmp	r2, #11
 800325c:	d917      	bls.n	800328e <_malloc_r+0xc2>
 800325e:	1961      	adds	r1, r4, r5
 8003260:	42a3      	cmp	r3, r4
 8003262:	6025      	str	r5, [r4, #0]
 8003264:	bf18      	it	ne
 8003266:	6059      	strne	r1, [r3, #4]
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	bf08      	it	eq
 800326c:	f8c8 1000 	streq.w	r1, [r8]
 8003270:	5162      	str	r2, [r4, r5]
 8003272:	604b      	str	r3, [r1, #4]
 8003274:	4630      	mov	r0, r6
 8003276:	f000 f82f 	bl	80032d8 <__malloc_unlock>
 800327a:	f104 000b 	add.w	r0, r4, #11
 800327e:	1d23      	adds	r3, r4, #4
 8003280:	f020 0007 	bic.w	r0, r0, #7
 8003284:	1ac2      	subs	r2, r0, r3
 8003286:	bf1c      	itt	ne
 8003288:	1a1b      	subne	r3, r3, r0
 800328a:	50a3      	strne	r3, [r4, r2]
 800328c:	e7af      	b.n	80031ee <_malloc_r+0x22>
 800328e:	6862      	ldr	r2, [r4, #4]
 8003290:	42a3      	cmp	r3, r4
 8003292:	bf0c      	ite	eq
 8003294:	f8c8 2000 	streq.w	r2, [r8]
 8003298:	605a      	strne	r2, [r3, #4]
 800329a:	e7eb      	b.n	8003274 <_malloc_r+0xa8>
 800329c:	4623      	mov	r3, r4
 800329e:	6864      	ldr	r4, [r4, #4]
 80032a0:	e7ae      	b.n	8003200 <_malloc_r+0x34>
 80032a2:	463c      	mov	r4, r7
 80032a4:	687f      	ldr	r7, [r7, #4]
 80032a6:	e7b6      	b.n	8003216 <_malloc_r+0x4a>
 80032a8:	461a      	mov	r2, r3
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	42a3      	cmp	r3, r4
 80032ae:	d1fb      	bne.n	80032a8 <_malloc_r+0xdc>
 80032b0:	2300      	movs	r3, #0
 80032b2:	6053      	str	r3, [r2, #4]
 80032b4:	e7de      	b.n	8003274 <_malloc_r+0xa8>
 80032b6:	230c      	movs	r3, #12
 80032b8:	6033      	str	r3, [r6, #0]
 80032ba:	4630      	mov	r0, r6
 80032bc:	f000 f80c 	bl	80032d8 <__malloc_unlock>
 80032c0:	e794      	b.n	80031ec <_malloc_r+0x20>
 80032c2:	6005      	str	r5, [r0, #0]
 80032c4:	e7d6      	b.n	8003274 <_malloc_r+0xa8>
 80032c6:	bf00      	nop
 80032c8:	2000a7b8 	.word	0x2000a7b8

080032cc <__malloc_lock>:
 80032cc:	4801      	ldr	r0, [pc, #4]	@ (80032d4 <__malloc_lock+0x8>)
 80032ce:	f7ff bf0f 	b.w	80030f0 <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	2000a7b0 	.word	0x2000a7b0

080032d8 <__malloc_unlock>:
 80032d8:	4801      	ldr	r0, [pc, #4]	@ (80032e0 <__malloc_unlock+0x8>)
 80032da:	f7ff bf0a 	b.w	80030f2 <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	2000a7b0 	.word	0x2000a7b0

080032e4 <__ssputs_r>:
 80032e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e8:	688e      	ldr	r6, [r1, #8]
 80032ea:	461f      	mov	r7, r3
 80032ec:	42be      	cmp	r6, r7
 80032ee:	680b      	ldr	r3, [r1, #0]
 80032f0:	4682      	mov	sl, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4690      	mov	r8, r2
 80032f6:	d82d      	bhi.n	8003354 <__ssputs_r+0x70>
 80032f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003300:	d026      	beq.n	8003350 <__ssputs_r+0x6c>
 8003302:	6965      	ldr	r5, [r4, #20]
 8003304:	6909      	ldr	r1, [r1, #16]
 8003306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800330a:	eba3 0901 	sub.w	r9, r3, r1
 800330e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003312:	1c7b      	adds	r3, r7, #1
 8003314:	444b      	add	r3, r9
 8003316:	106d      	asrs	r5, r5, #1
 8003318:	429d      	cmp	r5, r3
 800331a:	bf38      	it	cc
 800331c:	461d      	movcc	r5, r3
 800331e:	0553      	lsls	r3, r2, #21
 8003320:	d527      	bpl.n	8003372 <__ssputs_r+0x8e>
 8003322:	4629      	mov	r1, r5
 8003324:	f7ff ff52 	bl	80031cc <_malloc_r>
 8003328:	4606      	mov	r6, r0
 800332a:	b360      	cbz	r0, 8003386 <__ssputs_r+0xa2>
 800332c:	6921      	ldr	r1, [r4, #16]
 800332e:	464a      	mov	r2, r9
 8003330:	f000 fae8 	bl	8003904 <memcpy>
 8003334:	89a3      	ldrh	r3, [r4, #12]
 8003336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800333a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800333e:	81a3      	strh	r3, [r4, #12]
 8003340:	6126      	str	r6, [r4, #16]
 8003342:	6165      	str	r5, [r4, #20]
 8003344:	444e      	add	r6, r9
 8003346:	eba5 0509 	sub.w	r5, r5, r9
 800334a:	6026      	str	r6, [r4, #0]
 800334c:	60a5      	str	r5, [r4, #8]
 800334e:	463e      	mov	r6, r7
 8003350:	42be      	cmp	r6, r7
 8003352:	d900      	bls.n	8003356 <__ssputs_r+0x72>
 8003354:	463e      	mov	r6, r7
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	4632      	mov	r2, r6
 800335a:	4641      	mov	r1, r8
 800335c:	f000 faa8 	bl	80038b0 <memmove>
 8003360:	68a3      	ldr	r3, [r4, #8]
 8003362:	1b9b      	subs	r3, r3, r6
 8003364:	60a3      	str	r3, [r4, #8]
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	4433      	add	r3, r6
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	2000      	movs	r0, #0
 800336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003372:	462a      	mov	r2, r5
 8003374:	f000 fad4 	bl	8003920 <_realloc_r>
 8003378:	4606      	mov	r6, r0
 800337a:	2800      	cmp	r0, #0
 800337c:	d1e0      	bne.n	8003340 <__ssputs_r+0x5c>
 800337e:	6921      	ldr	r1, [r4, #16]
 8003380:	4650      	mov	r0, sl
 8003382:	f7ff feb7 	bl	80030f4 <_free_r>
 8003386:	230c      	movs	r3, #12
 8003388:	f8ca 3000 	str.w	r3, [sl]
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	e7e9      	b.n	800336e <__ssputs_r+0x8a>
	...

0800339c <_svfiprintf_r>:
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a0:	4698      	mov	r8, r3
 80033a2:	898b      	ldrh	r3, [r1, #12]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	b09d      	sub	sp, #116	@ 0x74
 80033a8:	4607      	mov	r7, r0
 80033aa:	460d      	mov	r5, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	d510      	bpl.n	80033d2 <_svfiprintf_r+0x36>
 80033b0:	690b      	ldr	r3, [r1, #16]
 80033b2:	b973      	cbnz	r3, 80033d2 <_svfiprintf_r+0x36>
 80033b4:	2140      	movs	r1, #64	@ 0x40
 80033b6:	f7ff ff09 	bl	80031cc <_malloc_r>
 80033ba:	6028      	str	r0, [r5, #0]
 80033bc:	6128      	str	r0, [r5, #16]
 80033be:	b930      	cbnz	r0, 80033ce <_svfiprintf_r+0x32>
 80033c0:	230c      	movs	r3, #12
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	b01d      	add	sp, #116	@ 0x74
 80033ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ce:	2340      	movs	r3, #64	@ 0x40
 80033d0:	616b      	str	r3, [r5, #20]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80033d6:	2320      	movs	r3, #32
 80033d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80033e0:	2330      	movs	r3, #48	@ 0x30
 80033e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003580 <_svfiprintf_r+0x1e4>
 80033e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033ea:	f04f 0901 	mov.w	r9, #1
 80033ee:	4623      	mov	r3, r4
 80033f0:	469a      	mov	sl, r3
 80033f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033f6:	b10a      	cbz	r2, 80033fc <_svfiprintf_r+0x60>
 80033f8:	2a25      	cmp	r2, #37	@ 0x25
 80033fa:	d1f9      	bne.n	80033f0 <_svfiprintf_r+0x54>
 80033fc:	ebba 0b04 	subs.w	fp, sl, r4
 8003400:	d00b      	beq.n	800341a <_svfiprintf_r+0x7e>
 8003402:	465b      	mov	r3, fp
 8003404:	4622      	mov	r2, r4
 8003406:	4629      	mov	r1, r5
 8003408:	4638      	mov	r0, r7
 800340a:	f7ff ff6b 	bl	80032e4 <__ssputs_r>
 800340e:	3001      	adds	r0, #1
 8003410:	f000 80a7 	beq.w	8003562 <_svfiprintf_r+0x1c6>
 8003414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003416:	445a      	add	r2, fp
 8003418:	9209      	str	r2, [sp, #36]	@ 0x24
 800341a:	f89a 3000 	ldrb.w	r3, [sl]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 809f 	beq.w	8003562 <_svfiprintf_r+0x1c6>
 8003424:	2300      	movs	r3, #0
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800342e:	f10a 0a01 	add.w	sl, sl, #1
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	9307      	str	r3, [sp, #28]
 8003436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800343a:	931a      	str	r3, [sp, #104]	@ 0x68
 800343c:	4654      	mov	r4, sl
 800343e:	2205      	movs	r2, #5
 8003440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003444:	484e      	ldr	r0, [pc, #312]	@ (8003580 <_svfiprintf_r+0x1e4>)
 8003446:	f7fc fec3 	bl	80001d0 <memchr>
 800344a:	9a04      	ldr	r2, [sp, #16]
 800344c:	b9d8      	cbnz	r0, 8003486 <_svfiprintf_r+0xea>
 800344e:	06d0      	lsls	r0, r2, #27
 8003450:	bf44      	itt	mi
 8003452:	2320      	movmi	r3, #32
 8003454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003458:	0711      	lsls	r1, r2, #28
 800345a:	bf44      	itt	mi
 800345c:	232b      	movmi	r3, #43	@ 0x2b
 800345e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003462:	f89a 3000 	ldrb.w	r3, [sl]
 8003466:	2b2a      	cmp	r3, #42	@ 0x2a
 8003468:	d015      	beq.n	8003496 <_svfiprintf_r+0xfa>
 800346a:	9a07      	ldr	r2, [sp, #28]
 800346c:	4654      	mov	r4, sl
 800346e:	2000      	movs	r0, #0
 8003470:	f04f 0c0a 	mov.w	ip, #10
 8003474:	4621      	mov	r1, r4
 8003476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800347a:	3b30      	subs	r3, #48	@ 0x30
 800347c:	2b09      	cmp	r3, #9
 800347e:	d94b      	bls.n	8003518 <_svfiprintf_r+0x17c>
 8003480:	b1b0      	cbz	r0, 80034b0 <_svfiprintf_r+0x114>
 8003482:	9207      	str	r2, [sp, #28]
 8003484:	e014      	b.n	80034b0 <_svfiprintf_r+0x114>
 8003486:	eba0 0308 	sub.w	r3, r0, r8
 800348a:	fa09 f303 	lsl.w	r3, r9, r3
 800348e:	4313      	orrs	r3, r2
 8003490:	9304      	str	r3, [sp, #16]
 8003492:	46a2      	mov	sl, r4
 8003494:	e7d2      	b.n	800343c <_svfiprintf_r+0xa0>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	1d19      	adds	r1, r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	9103      	str	r1, [sp, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bfbb      	ittet	lt
 80034a2:	425b      	neglt	r3, r3
 80034a4:	f042 0202 	orrlt.w	r2, r2, #2
 80034a8:	9307      	strge	r3, [sp, #28]
 80034aa:	9307      	strlt	r3, [sp, #28]
 80034ac:	bfb8      	it	lt
 80034ae:	9204      	strlt	r2, [sp, #16]
 80034b0:	7823      	ldrb	r3, [r4, #0]
 80034b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80034b4:	d10a      	bne.n	80034cc <_svfiprintf_r+0x130>
 80034b6:	7863      	ldrb	r3, [r4, #1]
 80034b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ba:	d132      	bne.n	8003522 <_svfiprintf_r+0x186>
 80034bc:	9b03      	ldr	r3, [sp, #12]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	9203      	str	r2, [sp, #12]
 80034c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034c8:	3402      	adds	r4, #2
 80034ca:	9305      	str	r3, [sp, #20]
 80034cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003590 <_svfiprintf_r+0x1f4>
 80034d0:	7821      	ldrb	r1, [r4, #0]
 80034d2:	2203      	movs	r2, #3
 80034d4:	4650      	mov	r0, sl
 80034d6:	f7fc fe7b 	bl	80001d0 <memchr>
 80034da:	b138      	cbz	r0, 80034ec <_svfiprintf_r+0x150>
 80034dc:	9b04      	ldr	r3, [sp, #16]
 80034de:	eba0 000a 	sub.w	r0, r0, sl
 80034e2:	2240      	movs	r2, #64	@ 0x40
 80034e4:	4082      	lsls	r2, r0
 80034e6:	4313      	orrs	r3, r2
 80034e8:	3401      	adds	r4, #1
 80034ea:	9304      	str	r3, [sp, #16]
 80034ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f0:	4824      	ldr	r0, [pc, #144]	@ (8003584 <_svfiprintf_r+0x1e8>)
 80034f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034f6:	2206      	movs	r2, #6
 80034f8:	f7fc fe6a 	bl	80001d0 <memchr>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d036      	beq.n	800356e <_svfiprintf_r+0x1d2>
 8003500:	4b21      	ldr	r3, [pc, #132]	@ (8003588 <_svfiprintf_r+0x1ec>)
 8003502:	bb1b      	cbnz	r3, 800354c <_svfiprintf_r+0x1b0>
 8003504:	9b03      	ldr	r3, [sp, #12]
 8003506:	3307      	adds	r3, #7
 8003508:	f023 0307 	bic.w	r3, r3, #7
 800350c:	3308      	adds	r3, #8
 800350e:	9303      	str	r3, [sp, #12]
 8003510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003512:	4433      	add	r3, r6
 8003514:	9309      	str	r3, [sp, #36]	@ 0x24
 8003516:	e76a      	b.n	80033ee <_svfiprintf_r+0x52>
 8003518:	fb0c 3202 	mla	r2, ip, r2, r3
 800351c:	460c      	mov	r4, r1
 800351e:	2001      	movs	r0, #1
 8003520:	e7a8      	b.n	8003474 <_svfiprintf_r+0xd8>
 8003522:	2300      	movs	r3, #0
 8003524:	3401      	adds	r4, #1
 8003526:	9305      	str	r3, [sp, #20]
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0c0a 	mov.w	ip, #10
 800352e:	4620      	mov	r0, r4
 8003530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003534:	3a30      	subs	r2, #48	@ 0x30
 8003536:	2a09      	cmp	r2, #9
 8003538:	d903      	bls.n	8003542 <_svfiprintf_r+0x1a6>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0c6      	beq.n	80034cc <_svfiprintf_r+0x130>
 800353e:	9105      	str	r1, [sp, #20]
 8003540:	e7c4      	b.n	80034cc <_svfiprintf_r+0x130>
 8003542:	fb0c 2101 	mla	r1, ip, r1, r2
 8003546:	4604      	mov	r4, r0
 8003548:	2301      	movs	r3, #1
 800354a:	e7f0      	b.n	800352e <_svfiprintf_r+0x192>
 800354c:	ab03      	add	r3, sp, #12
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	462a      	mov	r2, r5
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <_svfiprintf_r+0x1f0>)
 8003554:	a904      	add	r1, sp, #16
 8003556:	4638      	mov	r0, r7
 8003558:	f3af 8000 	nop.w
 800355c:	1c42      	adds	r2, r0, #1
 800355e:	4606      	mov	r6, r0
 8003560:	d1d6      	bne.n	8003510 <_svfiprintf_r+0x174>
 8003562:	89ab      	ldrh	r3, [r5, #12]
 8003564:	065b      	lsls	r3, r3, #25
 8003566:	f53f af2d 	bmi.w	80033c4 <_svfiprintf_r+0x28>
 800356a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800356c:	e72c      	b.n	80033c8 <_svfiprintf_r+0x2c>
 800356e:	ab03      	add	r3, sp, #12
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	462a      	mov	r2, r5
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <_svfiprintf_r+0x1f0>)
 8003576:	a904      	add	r1, sp, #16
 8003578:	4638      	mov	r0, r7
 800357a:	f000 f879 	bl	8003670 <_printf_i>
 800357e:	e7ed      	b.n	800355c <_svfiprintf_r+0x1c0>
 8003580:	08003a6c 	.word	0x08003a6c
 8003584:	08003a76 	.word	0x08003a76
 8003588:	00000000 	.word	0x00000000
 800358c:	080032e5 	.word	0x080032e5
 8003590:	08003a72 	.word	0x08003a72

08003594 <_printf_common>:
 8003594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	4616      	mov	r6, r2
 800359a:	4698      	mov	r8, r3
 800359c:	688a      	ldr	r2, [r1, #8]
 800359e:	690b      	ldr	r3, [r1, #16]
 80035a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bfb8      	it	lt
 80035a8:	4613      	movlt	r3, r2
 80035aa:	6033      	str	r3, [r6, #0]
 80035ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035b0:	4607      	mov	r7, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	b10a      	cbz	r2, 80035ba <_printf_common+0x26>
 80035b6:	3301      	adds	r3, #1
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	0699      	lsls	r1, r3, #26
 80035be:	bf42      	ittt	mi
 80035c0:	6833      	ldrmi	r3, [r6, #0]
 80035c2:	3302      	addmi	r3, #2
 80035c4:	6033      	strmi	r3, [r6, #0]
 80035c6:	6825      	ldr	r5, [r4, #0]
 80035c8:	f015 0506 	ands.w	r5, r5, #6
 80035cc:	d106      	bne.n	80035dc <_printf_common+0x48>
 80035ce:	f104 0a19 	add.w	sl, r4, #25
 80035d2:	68e3      	ldr	r3, [r4, #12]
 80035d4:	6832      	ldr	r2, [r6, #0]
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	42ab      	cmp	r3, r5
 80035da:	dc26      	bgt.n	800362a <_printf_common+0x96>
 80035dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	3b00      	subs	r3, #0
 80035e4:	bf18      	it	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	0692      	lsls	r2, r2, #26
 80035ea:	d42b      	bmi.n	8003644 <_printf_common+0xb0>
 80035ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035f0:	4641      	mov	r1, r8
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c8      	blx	r9
 80035f6:	3001      	adds	r0, #1
 80035f8:	d01e      	beq.n	8003638 <_printf_common+0xa4>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	6922      	ldr	r2, [r4, #16]
 80035fe:	f003 0306 	and.w	r3, r3, #6
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf02      	ittt	eq
 8003606:	68e5      	ldreq	r5, [r4, #12]
 8003608:	6833      	ldreq	r3, [r6, #0]
 800360a:	1aed      	subeq	r5, r5, r3
 800360c:	68a3      	ldr	r3, [r4, #8]
 800360e:	bf0c      	ite	eq
 8003610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003614:	2500      	movne	r5, #0
 8003616:	4293      	cmp	r3, r2
 8003618:	bfc4      	itt	gt
 800361a:	1a9b      	subgt	r3, r3, r2
 800361c:	18ed      	addgt	r5, r5, r3
 800361e:	2600      	movs	r6, #0
 8003620:	341a      	adds	r4, #26
 8003622:	42b5      	cmp	r5, r6
 8003624:	d11a      	bne.n	800365c <_printf_common+0xc8>
 8003626:	2000      	movs	r0, #0
 8003628:	e008      	b.n	800363c <_printf_common+0xa8>
 800362a:	2301      	movs	r3, #1
 800362c:	4652      	mov	r2, sl
 800362e:	4641      	mov	r1, r8
 8003630:	4638      	mov	r0, r7
 8003632:	47c8      	blx	r9
 8003634:	3001      	adds	r0, #1
 8003636:	d103      	bne.n	8003640 <_printf_common+0xac>
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003640:	3501      	adds	r5, #1
 8003642:	e7c6      	b.n	80035d2 <_printf_common+0x3e>
 8003644:	18e1      	adds	r1, r4, r3
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	2030      	movs	r0, #48	@ 0x30
 800364a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800364e:	4422      	add	r2, r4
 8003650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003658:	3302      	adds	r3, #2
 800365a:	e7c7      	b.n	80035ec <_printf_common+0x58>
 800365c:	2301      	movs	r3, #1
 800365e:	4622      	mov	r2, r4
 8003660:	4641      	mov	r1, r8
 8003662:	4638      	mov	r0, r7
 8003664:	47c8      	blx	r9
 8003666:	3001      	adds	r0, #1
 8003668:	d0e6      	beq.n	8003638 <_printf_common+0xa4>
 800366a:	3601      	adds	r6, #1
 800366c:	e7d9      	b.n	8003622 <_printf_common+0x8e>
	...

08003670 <_printf_i>:
 8003670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003674:	7e0f      	ldrb	r7, [r1, #24]
 8003676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003678:	2f78      	cmp	r7, #120	@ 0x78
 800367a:	4691      	mov	r9, r2
 800367c:	4680      	mov	r8, r0
 800367e:	460c      	mov	r4, r1
 8003680:	469a      	mov	sl, r3
 8003682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003686:	d807      	bhi.n	8003698 <_printf_i+0x28>
 8003688:	2f62      	cmp	r7, #98	@ 0x62
 800368a:	d80a      	bhi.n	80036a2 <_printf_i+0x32>
 800368c:	2f00      	cmp	r7, #0
 800368e:	f000 80d2 	beq.w	8003836 <_printf_i+0x1c6>
 8003692:	2f58      	cmp	r7, #88	@ 0x58
 8003694:	f000 80b9 	beq.w	800380a <_printf_i+0x19a>
 8003698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800369c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036a0:	e03a      	b.n	8003718 <_printf_i+0xa8>
 80036a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036a6:	2b15      	cmp	r3, #21
 80036a8:	d8f6      	bhi.n	8003698 <_printf_i+0x28>
 80036aa:	a101      	add	r1, pc, #4	@ (adr r1, 80036b0 <_printf_i+0x40>)
 80036ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b0:	08003709 	.word	0x08003709
 80036b4:	0800371d 	.word	0x0800371d
 80036b8:	08003699 	.word	0x08003699
 80036bc:	08003699 	.word	0x08003699
 80036c0:	08003699 	.word	0x08003699
 80036c4:	08003699 	.word	0x08003699
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	08003699 	.word	0x08003699
 80036d0:	08003699 	.word	0x08003699
 80036d4:	08003699 	.word	0x08003699
 80036d8:	08003699 	.word	0x08003699
 80036dc:	0800381d 	.word	0x0800381d
 80036e0:	08003747 	.word	0x08003747
 80036e4:	080037d7 	.word	0x080037d7
 80036e8:	08003699 	.word	0x08003699
 80036ec:	08003699 	.word	0x08003699
 80036f0:	0800383f 	.word	0x0800383f
 80036f4:	08003699 	.word	0x08003699
 80036f8:	08003747 	.word	0x08003747
 80036fc:	08003699 	.word	0x08003699
 8003700:	08003699 	.word	0x08003699
 8003704:	080037df 	.word	0x080037df
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6032      	str	r2, [r6, #0]
 8003710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003718:	2301      	movs	r3, #1
 800371a:	e09d      	b.n	8003858 <_printf_i+0x1e8>
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	6031      	str	r1, [r6, #0]
 8003724:	0606      	lsls	r6, r0, #24
 8003726:	d501      	bpl.n	800372c <_printf_i+0xbc>
 8003728:	681d      	ldr	r5, [r3, #0]
 800372a:	e003      	b.n	8003734 <_printf_i+0xc4>
 800372c:	0645      	lsls	r5, r0, #25
 800372e:	d5fb      	bpl.n	8003728 <_printf_i+0xb8>
 8003730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003734:	2d00      	cmp	r5, #0
 8003736:	da03      	bge.n	8003740 <_printf_i+0xd0>
 8003738:	232d      	movs	r3, #45	@ 0x2d
 800373a:	426d      	negs	r5, r5
 800373c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003740:	4859      	ldr	r0, [pc, #356]	@ (80038a8 <_printf_i+0x238>)
 8003742:	230a      	movs	r3, #10
 8003744:	e011      	b.n	800376a <_printf_i+0xfa>
 8003746:	6821      	ldr	r1, [r4, #0]
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	0608      	lsls	r0, r1, #24
 800374c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003750:	d402      	bmi.n	8003758 <_printf_i+0xe8>
 8003752:	0649      	lsls	r1, r1, #25
 8003754:	bf48      	it	mi
 8003756:	b2ad      	uxthmi	r5, r5
 8003758:	2f6f      	cmp	r7, #111	@ 0x6f
 800375a:	4853      	ldr	r0, [pc, #332]	@ (80038a8 <_printf_i+0x238>)
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	bf14      	ite	ne
 8003760:	230a      	movne	r3, #10
 8003762:	2308      	moveq	r3, #8
 8003764:	2100      	movs	r1, #0
 8003766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800376a:	6866      	ldr	r6, [r4, #4]
 800376c:	60a6      	str	r6, [r4, #8]
 800376e:	2e00      	cmp	r6, #0
 8003770:	bfa2      	ittt	ge
 8003772:	6821      	ldrge	r1, [r4, #0]
 8003774:	f021 0104 	bicge.w	r1, r1, #4
 8003778:	6021      	strge	r1, [r4, #0]
 800377a:	b90d      	cbnz	r5, 8003780 <_printf_i+0x110>
 800377c:	2e00      	cmp	r6, #0
 800377e:	d04b      	beq.n	8003818 <_printf_i+0x1a8>
 8003780:	4616      	mov	r6, r2
 8003782:	fbb5 f1f3 	udiv	r1, r5, r3
 8003786:	fb03 5711 	mls	r7, r3, r1, r5
 800378a:	5dc7      	ldrb	r7, [r0, r7]
 800378c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003790:	462f      	mov	r7, r5
 8003792:	42bb      	cmp	r3, r7
 8003794:	460d      	mov	r5, r1
 8003796:	d9f4      	bls.n	8003782 <_printf_i+0x112>
 8003798:	2b08      	cmp	r3, #8
 800379a:	d10b      	bne.n	80037b4 <_printf_i+0x144>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	07df      	lsls	r7, r3, #31
 80037a0:	d508      	bpl.n	80037b4 <_printf_i+0x144>
 80037a2:	6923      	ldr	r3, [r4, #16]
 80037a4:	6861      	ldr	r1, [r4, #4]
 80037a6:	4299      	cmp	r1, r3
 80037a8:	bfde      	ittt	le
 80037aa:	2330      	movle	r3, #48	@ 0x30
 80037ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037b4:	1b92      	subs	r2, r2, r6
 80037b6:	6122      	str	r2, [r4, #16]
 80037b8:	f8cd a000 	str.w	sl, [sp]
 80037bc:	464b      	mov	r3, r9
 80037be:	aa03      	add	r2, sp, #12
 80037c0:	4621      	mov	r1, r4
 80037c2:	4640      	mov	r0, r8
 80037c4:	f7ff fee6 	bl	8003594 <_printf_common>
 80037c8:	3001      	adds	r0, #1
 80037ca:	d14a      	bne.n	8003862 <_printf_i+0x1f2>
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	b004      	add	sp, #16
 80037d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f043 0320 	orr.w	r3, r3, #32
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	4833      	ldr	r0, [pc, #204]	@ (80038ac <_printf_i+0x23c>)
 80037e0:	2778      	movs	r7, #120	@ 0x78
 80037e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	6831      	ldr	r1, [r6, #0]
 80037ea:	061f      	lsls	r7, r3, #24
 80037ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80037f0:	d402      	bmi.n	80037f8 <_printf_i+0x188>
 80037f2:	065f      	lsls	r7, r3, #25
 80037f4:	bf48      	it	mi
 80037f6:	b2ad      	uxthmi	r5, r5
 80037f8:	6031      	str	r1, [r6, #0]
 80037fa:	07d9      	lsls	r1, r3, #31
 80037fc:	bf44      	itt	mi
 80037fe:	f043 0320 	orrmi.w	r3, r3, #32
 8003802:	6023      	strmi	r3, [r4, #0]
 8003804:	b11d      	cbz	r5, 800380e <_printf_i+0x19e>
 8003806:	2310      	movs	r3, #16
 8003808:	e7ac      	b.n	8003764 <_printf_i+0xf4>
 800380a:	4827      	ldr	r0, [pc, #156]	@ (80038a8 <_printf_i+0x238>)
 800380c:	e7e9      	b.n	80037e2 <_printf_i+0x172>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f023 0320 	bic.w	r3, r3, #32
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	e7f6      	b.n	8003806 <_printf_i+0x196>
 8003818:	4616      	mov	r6, r2
 800381a:	e7bd      	b.n	8003798 <_printf_i+0x128>
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	6825      	ldr	r5, [r4, #0]
 8003820:	6961      	ldr	r1, [r4, #20]
 8003822:	1d18      	adds	r0, r3, #4
 8003824:	6030      	str	r0, [r6, #0]
 8003826:	062e      	lsls	r6, r5, #24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	d501      	bpl.n	8003830 <_printf_i+0x1c0>
 800382c:	6019      	str	r1, [r3, #0]
 800382e:	e002      	b.n	8003836 <_printf_i+0x1c6>
 8003830:	0668      	lsls	r0, r5, #25
 8003832:	d5fb      	bpl.n	800382c <_printf_i+0x1bc>
 8003834:	8019      	strh	r1, [r3, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	6123      	str	r3, [r4, #16]
 800383a:	4616      	mov	r6, r2
 800383c:	e7bc      	b.n	80037b8 <_printf_i+0x148>
 800383e:	6833      	ldr	r3, [r6, #0]
 8003840:	1d1a      	adds	r2, r3, #4
 8003842:	6032      	str	r2, [r6, #0]
 8003844:	681e      	ldr	r6, [r3, #0]
 8003846:	6862      	ldr	r2, [r4, #4]
 8003848:	2100      	movs	r1, #0
 800384a:	4630      	mov	r0, r6
 800384c:	f7fc fcc0 	bl	80001d0 <memchr>
 8003850:	b108      	cbz	r0, 8003856 <_printf_i+0x1e6>
 8003852:	1b80      	subs	r0, r0, r6
 8003854:	6060      	str	r0, [r4, #4]
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	6123      	str	r3, [r4, #16]
 800385a:	2300      	movs	r3, #0
 800385c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003860:	e7aa      	b.n	80037b8 <_printf_i+0x148>
 8003862:	6923      	ldr	r3, [r4, #16]
 8003864:	4632      	mov	r2, r6
 8003866:	4649      	mov	r1, r9
 8003868:	4640      	mov	r0, r8
 800386a:	47d0      	blx	sl
 800386c:	3001      	adds	r0, #1
 800386e:	d0ad      	beq.n	80037cc <_printf_i+0x15c>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	079b      	lsls	r3, r3, #30
 8003874:	d413      	bmi.n	800389e <_printf_i+0x22e>
 8003876:	68e0      	ldr	r0, [r4, #12]
 8003878:	9b03      	ldr	r3, [sp, #12]
 800387a:	4298      	cmp	r0, r3
 800387c:	bfb8      	it	lt
 800387e:	4618      	movlt	r0, r3
 8003880:	e7a6      	b.n	80037d0 <_printf_i+0x160>
 8003882:	2301      	movs	r3, #1
 8003884:	4632      	mov	r2, r6
 8003886:	4649      	mov	r1, r9
 8003888:	4640      	mov	r0, r8
 800388a:	47d0      	blx	sl
 800388c:	3001      	adds	r0, #1
 800388e:	d09d      	beq.n	80037cc <_printf_i+0x15c>
 8003890:	3501      	adds	r5, #1
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	9903      	ldr	r1, [sp, #12]
 8003896:	1a5b      	subs	r3, r3, r1
 8003898:	42ab      	cmp	r3, r5
 800389a:	dcf2      	bgt.n	8003882 <_printf_i+0x212>
 800389c:	e7eb      	b.n	8003876 <_printf_i+0x206>
 800389e:	2500      	movs	r5, #0
 80038a0:	f104 0619 	add.w	r6, r4, #25
 80038a4:	e7f5      	b.n	8003892 <_printf_i+0x222>
 80038a6:	bf00      	nop
 80038a8:	08003a7d 	.word	0x08003a7d
 80038ac:	08003a8e 	.word	0x08003a8e

080038b0 <memmove>:
 80038b0:	4288      	cmp	r0, r1
 80038b2:	b510      	push	{r4, lr}
 80038b4:	eb01 0402 	add.w	r4, r1, r2
 80038b8:	d902      	bls.n	80038c0 <memmove+0x10>
 80038ba:	4284      	cmp	r4, r0
 80038bc:	4623      	mov	r3, r4
 80038be:	d807      	bhi.n	80038d0 <memmove+0x20>
 80038c0:	1e43      	subs	r3, r0, #1
 80038c2:	42a1      	cmp	r1, r4
 80038c4:	d008      	beq.n	80038d8 <memmove+0x28>
 80038c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ce:	e7f8      	b.n	80038c2 <memmove+0x12>
 80038d0:	4402      	add	r2, r0
 80038d2:	4601      	mov	r1, r0
 80038d4:	428a      	cmp	r2, r1
 80038d6:	d100      	bne.n	80038da <memmove+0x2a>
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038e2:	e7f7      	b.n	80038d4 <memmove+0x24>

080038e4 <_sbrk_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d06      	ldr	r5, [pc, #24]	@ (8003900 <_sbrk_r+0x1c>)
 80038e8:	2300      	movs	r3, #0
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	f7fd fc1e 	bl	8001130 <_sbrk>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_sbrk_r+0x1a>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_sbrk_r+0x1a>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	2000a7ac 	.word	0x2000a7ac

08003904 <memcpy>:
 8003904:	440a      	add	r2, r1
 8003906:	4291      	cmp	r1, r2
 8003908:	f100 33ff 	add.w	r3, r0, #4294967295
 800390c:	d100      	bne.n	8003910 <memcpy+0xc>
 800390e:	4770      	bx	lr
 8003910:	b510      	push	{r4, lr}
 8003912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800391a:	4291      	cmp	r1, r2
 800391c:	d1f9      	bne.n	8003912 <memcpy+0xe>
 800391e:	bd10      	pop	{r4, pc}

08003920 <_realloc_r>:
 8003920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003924:	4680      	mov	r8, r0
 8003926:	4615      	mov	r5, r2
 8003928:	460c      	mov	r4, r1
 800392a:	b921      	cbnz	r1, 8003936 <_realloc_r+0x16>
 800392c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003930:	4611      	mov	r1, r2
 8003932:	f7ff bc4b 	b.w	80031cc <_malloc_r>
 8003936:	b92a      	cbnz	r2, 8003944 <_realloc_r+0x24>
 8003938:	f7ff fbdc 	bl	80030f4 <_free_r>
 800393c:	2400      	movs	r4, #0
 800393e:	4620      	mov	r0, r4
 8003940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003944:	f000 f81a 	bl	800397c <_malloc_usable_size_r>
 8003948:	4285      	cmp	r5, r0
 800394a:	4606      	mov	r6, r0
 800394c:	d802      	bhi.n	8003954 <_realloc_r+0x34>
 800394e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003952:	d8f4      	bhi.n	800393e <_realloc_r+0x1e>
 8003954:	4629      	mov	r1, r5
 8003956:	4640      	mov	r0, r8
 8003958:	f7ff fc38 	bl	80031cc <_malloc_r>
 800395c:	4607      	mov	r7, r0
 800395e:	2800      	cmp	r0, #0
 8003960:	d0ec      	beq.n	800393c <_realloc_r+0x1c>
 8003962:	42b5      	cmp	r5, r6
 8003964:	462a      	mov	r2, r5
 8003966:	4621      	mov	r1, r4
 8003968:	bf28      	it	cs
 800396a:	4632      	movcs	r2, r6
 800396c:	f7ff ffca 	bl	8003904 <memcpy>
 8003970:	4621      	mov	r1, r4
 8003972:	4640      	mov	r0, r8
 8003974:	f7ff fbbe 	bl	80030f4 <_free_r>
 8003978:	463c      	mov	r4, r7
 800397a:	e7e0      	b.n	800393e <_realloc_r+0x1e>

0800397c <_malloc_usable_size_r>:
 800397c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003980:	1f18      	subs	r0, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	bfbc      	itt	lt
 8003986:	580b      	ldrlt	r3, [r1, r0]
 8003988:	18c0      	addlt	r0, r0, r3
 800398a:	4770      	bx	lr

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
