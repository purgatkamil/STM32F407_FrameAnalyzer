
STM32F407_FrameAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003a70  08003a70  00004a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b8c  08003b8c  00005360  2**0
                  CONTENTS
  4 .ARM          00000008  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b94  08003b94  00005360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000360  20000000  08003b9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005360  2**0
                  CONTENTS
 10 .bss          0000a460  20000360  20000360  00005360  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a7c0  2000a7c0  00005360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007edf  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8a  00000000  00000000  0000d26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0000f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005eb  00000000  00000000  0000f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f1a  00000000  00000000  0000fefb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aebc  00000000  00000000  00030e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c33c8  00000000  00000000  0003bcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff099  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000234c  00000000  00000000  000ff0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00101428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a58 	.word	0x08003a58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	08003a58 	.word	0x08003a58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <MX_DMA_Init+0x3c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <MX_DMA_Init+0x3c>)
 8000570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <MX_DMA_Init+0x3c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	203b      	movs	r0, #59	@ 0x3b
 8000588:	f001 f81b 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800058c:	203b      	movs	r0, #59	@ 0x3b
 800058e:	f001 f834 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b3a      	ldr	r3, [pc, #232]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a39      	ldr	r2, [pc, #228]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b37      	ldr	r3, [pc, #220]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a32      	ldr	r2, [pc, #200]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_GPIO_Init+0x104>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2108      	movs	r1, #8
 80005f2:	482d      	ldr	r0, [pc, #180]	@ (80006a8 <MX_GPIO_Init+0x108>)
 80005f4:	f001 fd40 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	482b      	ldr	r0, [pc, #172]	@ (80006ac <MX_GPIO_Init+0x10c>)
 80005fe:	f001 fd3b 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <MX_GPIO_Init+0x10c>)
 8000608:	f001 fd36 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800060c:	2308      	movs	r3, #8
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <MX_GPIO_Init+0x108>)
 8000624:	f001 fb74 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_SS_Pin;
 8000628:	230a      	movs	r3, #10
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	481b      	ldr	r0, [pc, #108]	@ (80006ac <MX_GPIO_Init+0x10c>)
 8000640:	f001 fb66 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ANALYZER_SCL_IT_RISING_Pin|ANALYZER_SDA_IT_RISING_Pin;
 8000644:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <MX_GPIO_Init+0x108>)
 800065c:	f001 fb58 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ANALYZER_SCL_IT_FALLING_Pin|ANALYZER_SDA_IT_FALLING_Pin;
 8000660:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000666:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <MX_GPIO_Init+0x108>)
 8000678:	f001 fb4a 	bl	8001d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2017      	movs	r0, #23
 8000682:	f000 ff9e 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000686:	2017      	movs	r0, #23
 8000688:	f000 ffb7 	bl	80015fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2028      	movs	r0, #40	@ 0x28
 8000692:	f000 ff96 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000696:	2028      	movs	r0, #40	@ 0x28
 8000698:	f000 ffaf 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020000 	.word	0x40020000

080006b0 <i2c_convert_i2c_byte>:
static i2c_conversion_state conversion = CONVERSION_NOT_READY;

volatile int i2c_last_scl_bit_value = 1;

static void i2c_convert_i2c_byte()
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	volatile int i2c_ready_byte = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < 8; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e00d      	b.n	80006dc <i2c_convert_i2c_byte+0x2c>
	{
		i2c_ready_byte += i2c_bits[7 - i] << i;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <i2c_convert_i2c_byte+0x5c>)
 80006c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	409a      	lsls	r2, r3
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	ddee      	ble.n	80006c0 <i2c_convert_i2c_byte+0x10>
	}

	i2c_bytes[i2c_bytes_counter] = i2c_ready_byte;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <i2c_convert_i2c_byte+0x60>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	490a      	ldr	r1, [pc, #40]	@ (8000714 <i2c_convert_i2c_byte+0x64>)
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_bytes_counter++;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <i2c_convert_i2c_byte+0x60>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a06      	ldr	r2, [pc, #24]	@ (8000710 <i2c_convert_i2c_byte+0x60>)
 80006f6:	6013      	str	r3, [r2, #0]
	conversion = CONVERSION_READY;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <i2c_convert_i2c_byte+0x68>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	2000037c 	.word	0x2000037c
 8000710:	20000580 	.word	0x20000580
 8000714:	20000480 	.word	0x20000480
 8000718:	2000058c 	.word	0x2000058c

0800071c <i2c_read_data>:

i2c_analyze_state i2c_read_data()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	i2c_last_scl_bit_value = 1;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <i2c_read_data+0x68>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
	i2c_bits[i2c_bits_counter] = HAL_GPIO_ReadPin(ANALYZER_SDA_IT_RISING_GPIO_Port, ANALYZER_SDA_IT_RISING_Pin);
 8000726:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072a:	4817      	ldr	r0, [pc, #92]	@ (8000788 <i2c_read_data+0x6c>)
 800072c:	f001 fc8c 	bl	8002048 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <i2c_read_data+0x70>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4611      	mov	r1, r2
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <i2c_read_data+0x74>)
 800073c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


	if ( ( ( i2c_bits_counter + OFFSET ) % ACK_BIT ) != 0 )
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <i2c_read_data+0x70>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	1c59      	adds	r1, r3, #1
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <i2c_read_data+0x78>)
 8000748:	fb83 2301 	smull	r2, r3, r3, r1
 800074c:	105a      	asrs	r2, r3, #1
 800074e:	17cb      	asrs	r3, r1, #31
 8000750:	1ad2      	subs	r2, r2, r3
 8000752:	4613      	mov	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	1aca      	subs	r2, r1, r3
 800075a:	2a00      	cmp	r2, #0
 800075c:	d009      	beq.n	8000772 <i2c_read_data+0x56>
	{
		i2c_bits_counter++;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <i2c_read_data+0x70>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	4a09      	ldr	r2, [pc, #36]	@ (800078c <i2c_read_data+0x70>)
 8000766:	6013      	str	r3, [r2, #0]
		conversion = CONVERSION_NOT_READY;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <i2c_read_data+0x7c>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
		return I2C_BIT_SAVED;
 800076e:	2300      	movs	r3, #0
 8000770:	e005      	b.n	800077e <i2c_read_data+0x62>
	}
	else
	{
		i2c_convert_i2c_byte();
 8000772:	f7ff ff9d 	bl	80006b0 <i2c_convert_i2c_byte>
		i2c_bits_counter = 0;
 8000776:	4b05      	ldr	r3, [pc, #20]	@ (800078c <i2c_read_data+0x70>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
		return I2C_BYTE_SAVED;
 800077c:	2301      	movs	r3, #1
	}


}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000000 	.word	0x20000000
 8000788:	40020800 	.word	0x40020800
 800078c:	2000047c 	.word	0x2000047c
 8000790:	2000037c 	.word	0x2000037c
 8000794:	38e38e39 	.word	0x38e38e39
 8000798:	2000058c 	.word	0x2000058c

0800079c <i2c_get_ready_i2c_byte>:
		return CONVERSION_NOT_READY;
	}
}

int i2c_get_ready_i2c_byte()
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
	int temp = i2c_next_byte_counter;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <i2c_get_ready_i2c_byte+0x3c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	607b      	str	r3, [r7, #4]
	i2c_next_byte_counter++;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <i2c_get_ready_i2c_byte+0x3c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <i2c_get_ready_i2c_byte+0x3c>)
 80007b0:	6013      	str	r3, [r2, #0]
	i2c_conversion_state state = conversion;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <i2c_get_ready_i2c_byte+0x40>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	70fb      	strb	r3, [r7, #3]
	if(state == CONVERSION_READY)
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d102      	bne.n	80007c4 <i2c_get_ready_i2c_byte+0x28>
	{
		conversion = CONVERSION_NOT_READY;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <i2c_get_ready_i2c_byte+0x40>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
	}

	return i2c_bytes[temp];
 80007c4:	4a06      	ldr	r2, [pc, #24]	@ (80007e0 <i2c_get_ready_i2c_byte+0x44>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	20000584 	.word	0x20000584
 80007dc:	2000058c 	.word	0x2000058c
 80007e0:	20000480 	.word	0x20000480

080007e4 <i2c_check_for_start>:

i2c_tx_state i2c_check_for_start()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	i2c_tx_state state;

	if(HAL_GPIO_ReadPin(ANALYZER_SCL_IT_RISING_GPIO_Port, ANALYZER_SCL_IT_RISING_Pin) == GPIO_PIN_SET)
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <i2c_check_for_start+0x30>)
 80007ee:	f001 fc2b 	bl	8002048 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d106      	bne.n	8000806 <i2c_check_for_start+0x22>
	{
		if(i2c_last_scl_bit_value == 1)
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <i2c_check_for_start+0x34>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <i2c_check_for_start+0x26>
		{
			state = I2C_START;
 8000800:	2301      	movs	r3, #1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	e001      	b.n	800080a <i2c_check_for_start+0x26>
		}
	}
	else
	{
		state = I2C_NO_TX;
 8000806:	2303      	movs	r3, #3
 8000808:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 800080a:	79fb      	ldrb	r3, [r7, #7]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020800 	.word	0x40020800
 8000818:	20000000 	.word	0x20000000

0800081c <i2c_check_for_stop>:

i2c_tx_state i2c_check_for_stop()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	i2c_tx_state state;

	if(HAL_GPIO_ReadPin(ANALYZER_SCL_IT_RISING_GPIO_Port, ANALYZER_SCL_IT_RISING_Pin) == GPIO_PIN_SET)
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <i2c_check_for_stop+0x38>)
 8000826:	f001 fc0f 	bl	8002048 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	d10a      	bne.n	8000846 <i2c_check_for_stop+0x2a>
	{
		if(i2c_last_scl_bit_value == 1)
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <i2c_check_for_stop+0x3c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d108      	bne.n	800084a <i2c_check_for_stop+0x2e>
		{
			i2c_bytes_count_after_stop = i2c_bytes_counter;
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <i2c_check_for_stop+0x40>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <i2c_check_for_stop+0x44>)
 800083e:	6013      	str	r3, [r2, #0]
			state = I2C_STOP;
 8000840:	2300      	movs	r3, #0
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	e001      	b.n	800084a <i2c_check_for_stop+0x2e>
		}
	}
	else
	{
		state = I2C_DATA;
 8000846:	2302      	movs	r3, #2
 8000848:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 800084a:	79fb      	ldrb	r3, [r7, #7]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020800 	.word	0x40020800
 8000858:	20000000 	.word	0x20000000
 800085c:	20000580 	.word	0x20000580
 8000860:	20000588 	.word	0x20000588

08000864 <i2c_scl_falling>:

void i2c_scl_falling()
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	i2c_last_scl_bit_value = 1;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <i2c_scl_falling+0x14>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	20000000 	.word	0x20000000

0800087c <i2c_reset_all>:

void i2c_reset_all()
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
	for(int i = 0; i < 64; i++)
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e00c      	b.n	80008a2 <i2c_reset_all+0x26>
	{
		i2c_bits[i] = 0;
 8000888:	4a10      	ldr	r2, [pc, #64]	@ (80008cc <i2c_reset_all+0x50>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2100      	movs	r1, #0
 800088e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i2c_bytes[i] = 0;
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <i2c_reset_all+0x54>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2100      	movs	r1, #0
 8000898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 64; i++)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3301      	adds	r3, #1
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80008a6:	ddef      	ble.n	8000888 <i2c_reset_all+0xc>
	}

	i2c_bits_counter = 0;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <i2c_reset_all+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]

	i2c_bytes_counter = 0;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <i2c_reset_all+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
	i2c_next_byte_counter = 0;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <i2c_reset_all+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]

	conversion = CONVERSION_NOT_READY;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <i2c_reset_all+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	2000037c 	.word	0x2000037c
 80008d0:	20000480 	.word	0x20000480
 80008d4:	2000047c 	.word	0x2000047c
 80008d8:	20000580 	.word	0x20000580
 80008dc:	20000584 	.word	0x20000584
 80008e0:	2000058c 	.word	0x2000058c

080008e4 <i2c_get_bytes_buffor_size>:

int i2c_get_bytes_buffor_size()
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	return i2c_bytes_count_after_stop;
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <i2c_get_bytes_buffor_size+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000588 	.word	0x20000588

080008fc <lcd_send_command>:
};

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_send_command(uint8_t cmd)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2102      	movs	r1, #2
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <lcd_send_command+0x40>)
 800090c:	f001 fbb4 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2108      	movs	r1, #8
 8000914:	4809      	ldr	r0, [pc, #36]	@ (800093c <lcd_send_command+0x40>)
 8000916:	f001 fbaf 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800091a:	1df9      	adds	r1, r7, #7
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	2201      	movs	r2, #1
 8000922:	4807      	ldr	r0, [pc, #28]	@ (8000940 <lcd_send_command+0x44>)
 8000924:	f002 f887 	bl	8002a36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2108      	movs	r1, #8
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <lcd_send_command+0x40>)
 800092e:	f001 fba3 	bl	8002078 <HAL_GPIO_WritePin>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020000 	.word	0x40020000
 8000940:	2000a5b8 	.word	0x2000a5b8

08000944 <lcd_send_data>:

static void lcd_send_data(uint8_t data)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2102      	movs	r1, #2
 8000952:	480c      	ldr	r0, [pc, #48]	@ (8000984 <lcd_send_data+0x40>)
 8000954:	f001 fb90 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	4809      	ldr	r0, [pc, #36]	@ (8000984 <lcd_send_data+0x40>)
 800095e:	f001 fb8b 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000962:	1df9      	adds	r1, r7, #7
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	2201      	movs	r2, #1
 800096a:	4807      	ldr	r0, [pc, #28]	@ (8000988 <lcd_send_data+0x44>)
 800096c:	f002 f863 	bl	8002a36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2108      	movs	r1, #8
 8000974:	4803      	ldr	r0, [pc, #12]	@ (8000984 <lcd_send_data+0x40>)
 8000976:	f001 fb7f 	bl	8002078 <HAL_GPIO_WritePin>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40020000 	.word	0x40020000
 8000988:	2000a5b8 	.word	0x2000a5b8

0800098c <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <lcd_send+0x20>
		lcd_send_command(value);
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffa9 	bl	80008fc <lcd_send_command>
	} else {
		lcd_send_data(value);
	}
}
 80009aa:	e004      	b.n	80009b6 <lcd_send+0x2a>
		lcd_send_data(value);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ffc7 	bl	8000944 <lcd_send_data>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <lcd_init+0x68>)
 80009cc:	f001 fb54 	bl	8002078 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009d0:	2064      	movs	r0, #100	@ 0x64
 80009d2:	f000 fcf7 	bl	80013c4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2108      	movs	r1, #8
 80009da:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <lcd_init+0x68>)
 80009dc:	f001 fb4c 	bl	8002078 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009e0:	2064      	movs	r0, #100	@ 0x64
 80009e2:	f000 fcef 	bl	80013c4 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	e009      	b.n	8000a00 <lcd_init+0x40>
    lcd_send(init_table[i]);
 80009ec:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <lcd_init+0x6c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffc9 	bl	800098c <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3301      	adds	r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b4b      	cmp	r3, #75	@ 0x4b
 8000a04:	d9f2      	bls.n	80009ec <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8000a06:	20c8      	movs	r0, #200	@ 0xc8
 8000a08:	f000 fcdc 	bl	80013c4 <HAL_Delay>

  lcd_send_command(ST7735S_SLPOUT);
 8000a0c:	2011      	movs	r0, #17
 8000a0e:	f7ff ff75 	bl	80008fc <lcd_send_command>
  HAL_Delay(110);
 8000a12:	206e      	movs	r0, #110	@ 0x6e
 8000a14:	f000 fcd6 	bl	80013c4 <HAL_Delay>

  lcd_send_command(ST7735S_DISPON);
 8000a18:	2029      	movs	r0, #41	@ 0x29
 8000a1a:	f7ff ff6f 	bl	80008fc <lcd_send_command>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	08003aa8 	.word	0x08003aa8

08000a30 <lcd_send_data16>:

static void lcd_send_data16(uint16_t value)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
	lcd_send_data(value >> 8);
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff7e 	bl	8000944 <lcd_send_data>
	lcd_send_data(value);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff79 	bl	8000944 <lcd_send_data>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	603b      	str	r3, [r7, #0]
	lcd_send_command(ST7735S_CASET);
 8000a68:	202a      	movs	r0, #42	@ 0x2a
 8000a6a:	f7ff ff47 	bl	80008fc <lcd_send_command>
	lcd_send_data16(LCD_OFFSET_X + x);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	3301      	adds	r3, #1
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffda 	bl	8000a30 <lcd_send_data16>
	lcd_send_data16(LCD_OFFSET_X + x + width - 1);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ffd1 	bl	8000a30 <lcd_send_data16>

	lcd_send_command(ST7735S_RASET);
 8000a8e:	202b      	movs	r0, #43	@ 0x2b
 8000a90:	f7ff ff34 	bl	80008fc <lcd_send_command>
	lcd_send_data16(LCD_OFFSET_Y + y);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	3302      	adds	r3, #2
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffc7 	bl	8000a30 <lcd_send_data16>
	lcd_send_data16(LCD_OFFSET_Y + y + height- 1);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	4413      	add	r3, r2
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffbc 	bl	8000a30 <lcd_send_data16>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	015b      	lsls	r3, r3, #5
 8000ad8:	461a      	mov	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4413      	add	r3, r2
 8000ade:	4905      	ldr	r1, [pc, #20]	@ (8000af4 <lcd_put_pixel+0x34>)
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000590 	.word	0x20000590

08000af8 <fill_with>:

void fill_with(uint16_t color){
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]

	 int i = LCD_WIDTH * LCD_HEIGHT - 1;
 8000b02:	f644 73ff 	movw	r3, #20479	@ 0x4fff
 8000b06:	60fb      	str	r3, [r7, #12]
	 while(i >= 0){
 8000b08:	e007      	b.n	8000b1a <fill_with+0x22>
		frame_buffer[i] = color;
 8000b0a:	4909      	ldr	r1, [pc, #36]	@ (8000b30 <fill_with+0x38>)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	88fa      	ldrh	r2, [r7, #6]
 8000b10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		--i;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
	 while(i >= 0){
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	daf4      	bge.n	8000b0a <fill_with+0x12>
	 }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000590 	.word	0x20000590

08000b34 <lcd_copy>:

void lcd_copy(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000b38:	2380      	movs	r3, #128	@ 0x80
 8000b3a:	22a0      	movs	r2, #160	@ 0xa0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ff8b 	bl	8000a5a <lcd_set_window>
	lcd_send_command(ST7735S_RAMWR);
 8000b44:	202c      	movs	r0, #44	@ 0x2c
 8000b46:	f7ff fed9 	bl	80008fc <lcd_send_command>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <lcd_copy+0x3c>)
 8000b50:	f001 fa92 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2108      	movs	r1, #8
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <lcd_copy+0x3c>)
 8000b5a:	f001 fa8d 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8000b5e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000b62:	4904      	ldr	r1, [pc, #16]	@ (8000b74 <lcd_copy+0x40>)
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <lcd_copy+0x44>)
 8000b66:	f002 f8a9 	bl	8002cbc <HAL_SPI_Transmit_DMA>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40020000 	.word	0x40020000
 8000b74:	20000590 	.word	0x20000590
 8000b78:	2000a5b8 	.word	0x2000a5b8

08000b7c <LCD_DisplayChar>:
		return true;
	else
		return false;
}

void LCD_DisplayChar(uint16_t Xpoint, uint16_t Ypoint, char Acsii_Char, uint16_t Color) {
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	4608      	mov	r0, r1
 8000b86:	4611      	mov	r1, r2
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	80fb      	strh	r3, [r7, #6]
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80bb      	strh	r3, [r7, #4]
 8000b92:	460b      	mov	r3, r1
 8000b94:	70fb      	strb	r3, [r7, #3]
 8000b96:	4613      	mov	r3, r2
 8000b98:	803b      	strh	r3, [r7, #0]
    const uint8_t Font_Width = FONT_WIDTH; // Szerokość czcionki
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	73fb      	strb	r3, [r7, #15]
    const uint8_t Font_Height = FONT_HEIGHT; // Wysokość czcionki
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	73bb      	strb	r3, [r7, #14]

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font_Height * (Font_Width / 8 + (Font_Width % 8 ? 1 : 0));
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	3b20      	subs	r3, #32
 8000ba6:	7bba      	ldrb	r2, [r7, #14]
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	08d2      	lsrs	r2, r2, #3
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	f002 0207 	and.w	r2, r2, #7
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	bf14      	ite	ne
 8000bc0:	2201      	movne	r2, #1
 8000bc2:	2200      	moveq	r2, #0
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440a      	add	r2, r1
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	60bb      	str	r3, [r7, #8]
    const unsigned char* ptr = &Font8_Table[Char_Offset];
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4a22      	ldr	r2, [pc, #136]	@ (8000c5c <LCD_DisplayChar+0xe0>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	617b      	str	r3, [r7, #20]

    for (uint16_t Page = 0; Page < Font_Height; Page++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	827b      	strh	r3, [r7, #18]
 8000bda:	e035      	b.n	8000c48 <LCD_DisplayChar+0xcc>
        for (uint16_t Column = 0; Column < Font_Width; Column++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	823b      	strh	r3, [r7, #16]
 8000be0:	e021      	b.n	8000c26 <LCD_DisplayChar+0xaa>
            if (*ptr & (0x80 >> (Column % 8))) {
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4619      	mov	r1, r3
 8000be8:	8a3b      	ldrh	r3, [r7, #16]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	2280      	movs	r2, #128	@ 0x80
 8000bf0:	fa42 f303 	asr.w	r3, r2, r3
 8000bf4:	400b      	ands	r3, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d009      	beq.n	8000c0e <LCD_DisplayChar+0x92>
                lcd_put_pixel(Xpoint + Column, Ypoint + Page, Color);
 8000bfa:	88fa      	ldrh	r2, [r7, #6]
 8000bfc:	8a3b      	ldrh	r3, [r7, #16]
 8000bfe:	18d0      	adds	r0, r2, r3
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	8a7b      	ldrh	r3, [r7, #18]
 8000c04:	4413      	add	r3, r2
 8000c06:	883a      	ldrh	r2, [r7, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f7ff ff59 	bl	8000ac0 <lcd_put_pixel>
            }

            if (Column % 8 == 7) {
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	d102      	bne.n	8000c20 <LCD_DisplayChar+0xa4>
                ptr++;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
        for (uint16_t Column = 0; Column < Font_Width; Column++) {
 8000c20:	8a3b      	ldrh	r3, [r7, #16]
 8000c22:	3301      	adds	r3, #1
 8000c24:	823b      	strh	r3, [r7, #16]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	8a3a      	ldrh	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3d8      	bcc.n	8000be2 <LCD_DisplayChar+0x66>
            }
        }

        if (Font_Width % 8 != 0) {
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <LCD_DisplayChar+0xc6>
            ptr++;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
    for (uint16_t Page = 0; Page < Font_Height; Page++) {
 8000c42:	8a7b      	ldrh	r3, [r7, #18]
 8000c44:	3301      	adds	r3, #1
 8000c46:	827b      	strh	r3, [r7, #18]
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	8a7a      	ldrh	r2, [r7, #18]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d3c4      	bcc.n	8000bdc <LCD_DisplayChar+0x60>
        }
    }
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	20000004 	.word	0x20000004

08000c60 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xstart, uint16_t Ystart, char* pString, uint16_t Color) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60ba      	str	r2, [r7, #8]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	81fb      	strh	r3, [r7, #14]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	81bb      	strh	r3, [r7, #12]
 8000c72:	4613      	mov	r3, r2
 8000c74:	80fb      	strh	r3, [r7, #6]
    const uint8_t Font_Width = FONT_WIDTH; // Szerokość czcionki
 8000c76:	2305      	movs	r3, #5
 8000c78:	75fb      	strb	r3, [r7, #23]
    const uint8_t Font_Height = FONT_HEIGHT; // Wysokość czcionki
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	75bb      	strb	r3, [r7, #22]

    while (*pString != '\0') {
 8000c7e:	e01f      	b.n	8000cc0 <LCD_DisplayString+0x60>
        if (Xstart + Font_Width > LCD_WIDTH) {
 8000c80:	89fa      	ldrh	r2, [r7, #14]
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	4413      	add	r3, r2
 8000c86:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c88:	dd06      	ble.n	8000c98 <LCD_DisplayString+0x38>
            Xstart = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	81fb      	strh	r3, [r7, #14]
            Ystart += Font_Height;
 8000c8e:	7dbb      	ldrb	r3, [r7, #22]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	89bb      	ldrh	r3, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	81bb      	strh	r3, [r7, #12]
        }

        if (Ystart + Font_Height > LCD_HEIGHT) {
 8000c98:	89ba      	ldrh	r2, [r7, #12]
 8000c9a:	7dbb      	ldrb	r3, [r7, #22]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2b80      	cmp	r3, #128	@ 0x80
 8000ca0:	dc13      	bgt.n	8000cca <LCD_DisplayString+0x6a>
            break; // Wyjście z pętli, jeśli przekroczy wysokość ekranu
        }

        LCD_DisplayChar(Xstart, Ystart, *pString, Color);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	89b9      	ldrh	r1, [r7, #12]
 8000caa:	89f8      	ldrh	r0, [r7, #14]
 8000cac:	f7ff ff66 	bl	8000b7c <LCD_DisplayChar>
        pString++;
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
        Xstart += Font_Width;
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	81fb      	strh	r3, [r7, #14]
    while (*pString != '\0') {
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1db      	bne.n	8000c80 <LCD_DisplayString+0x20>
    }
}
 8000cc8:	e000      	b.n	8000ccc <LCD_DisplayString+0x6c>
            break; // Wyjście z pętli, jeśli przekroczy wysokość ekranu
 8000cca:	bf00      	nop
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <start_display>:

  int x = 10;
  int y = 10;

  void start_display()
  {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
	int choosen_color = WHITE;
 8000cda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cde:	60fb      	str	r3, [r7, #12]

	int size = i2c_get_bytes_buffor_size();
 8000ce0:	f7ff fe00 	bl	80008e4 <i2c_get_bytes_buffor_size>
 8000ce4:	6038      	str	r0, [r7, #0]
  	for(int i = 0; i < size; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	e05a      	b.n	8000da2 <start_display+0xce>
  	{
  	  switch(i)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <start_display+0x26>
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d00f      	beq.n	8000d18 <start_display+0x44>
 8000cf8:	e01e      	b.n	8000d38 <start_display+0x64>
  	  {
		  case 0:
		  	  new_data = i2c_get_ready_i2c_byte();
 8000cfa:	f7ff fd4f 	bl	800079c <i2c_get_ready_i2c_byte>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a3a      	ldr	r2, [pc, #232]	@ (8000dec <start_display+0x118>)
 8000d02:	6013      	str	r3, [r2, #0]
		  	  sprintf(new_data_char, "Device address: 0x%X", new_data);
 8000d04:	4b39      	ldr	r3, [pc, #228]	@ (8000dec <start_display+0x118>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4939      	ldr	r1, [pc, #228]	@ (8000df0 <start_display+0x11c>)
 8000d0c:	4839      	ldr	r0, [pc, #228]	@ (8000df4 <start_display+0x120>)
 8000d0e:	f002 fa03 	bl	8003118 <siprintf>
		  	  choosen_color = RED;
 8000d12:	23f8      	movs	r3, #248	@ 0xf8
 8000d14:	60fb      	str	r3, [r7, #12]
			  break;
 8000d16:	e01f      	b.n	8000d58 <start_display+0x84>

		  case 1:
		  	  new_data = i2c_get_ready_i2c_byte();
 8000d18:	f7ff fd40 	bl	800079c <i2c_get_ready_i2c_byte>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a33      	ldr	r2, [pc, #204]	@ (8000dec <start_display+0x118>)
 8000d20:	6013      	str	r3, [r2, #0]
		  	  sprintf(new_data_char, "Register address: 0x%X", new_data);
 8000d22:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <start_display+0x118>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4933      	ldr	r1, [pc, #204]	@ (8000df8 <start_display+0x124>)
 8000d2a:	4832      	ldr	r0, [pc, #200]	@ (8000df4 <start_display+0x120>)
 8000d2c:	f002 f9f4 	bl	8003118 <siprintf>
		  	  choosen_color = YELLOW;
 8000d30:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8000d34:	60fb      	str	r3, [r7, #12]
			  break;
 8000d36:	e00f      	b.n	8000d58 <start_display+0x84>

		  default:
		  	  new_data = i2c_get_ready_i2c_byte();
 8000d38:	f7ff fd30 	bl	800079c <i2c_get_ready_i2c_byte>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dec <start_display+0x118>)
 8000d40:	6013      	str	r3, [r2, #0]
		  	  sprintf(new_data_char, "D:0x%X", new_data);
 8000d42:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <start_display+0x118>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	492c      	ldr	r1, [pc, #176]	@ (8000dfc <start_display+0x128>)
 8000d4a:	482a      	ldr	r0, [pc, #168]	@ (8000df4 <start_display+0x120>)
 8000d4c:	f002 f9e4 	bl	8003118 <siprintf>
		  	  choosen_color = WHITE;
 8000d50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d54:	60fb      	str	r3, [r7, #12]
			  break;
 8000d56:	bf00      	nop
  	  }

  	  LCD_DisplayString( x, y, new_data_char, choosen_color);
 8000d58:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <start_display+0x12c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	4b29      	ldr	r3, [pc, #164]	@ (8000e04 <start_display+0x130>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	b299      	uxth	r1, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4a22      	ldr	r2, [pc, #136]	@ (8000df4 <start_display+0x120>)
 8000d6a:	f7ff ff79 	bl	8000c60 <LCD_DisplayString>

  	  if(y+10 < LCD_HEIGHT)
 8000d6e:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <start_display+0x130>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b75      	cmp	r3, #117	@ 0x75
 8000d74:	dc05      	bgt.n	8000d82 <start_display+0xae>
  	  {
  	      y = y + 10;
 8000d76:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <start_display+0x130>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	330a      	adds	r3, #10
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <start_display+0x130>)
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e007      	b.n	8000d92 <start_display+0xbe>
  	  }
  	  else
  	  {
  		  y = 30;
 8000d82:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <start_display+0x130>)
 8000d84:	221e      	movs	r2, #30
 8000d86:	601a      	str	r2, [r3, #0]
  		  x = x + 30;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <start_display+0x12c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	331e      	adds	r3, #30
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <start_display+0x12c>)
 8000d90:	6013      	str	r3, [r2, #0]
  	  }


  	  lcd_copy();
 8000d92:	f7ff fecf 	bl	8000b34 <lcd_copy>
  	  HAL_Delay(100);
 8000d96:	2064      	movs	r0, #100	@ 0x64
 8000d98:	f000 fb14 	bl	80013c4 <HAL_Delay>
  	for(int i = 0; i < size; i++)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dba0      	blt.n	8000cec <start_display+0x18>
  	}

  	i2c_reset_all();
 8000daa:	f7ff fd67 	bl	800087c <i2c_reset_all>
  	new_data = 0;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <start_display+0x118>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 30; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	e007      	b.n	8000dca <start_display+0xf6>
  	{
  		new_data_char[i] = 0;
 8000dba:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <start_display+0x120>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
  	for(int i = 0; i < 30; i++)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b1d      	cmp	r3, #29
 8000dce:	ddf4      	ble.n	8000dba <start_display+0xe6>
  	}

  	fill_with(BLACK);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fe91 	bl	8000af8 <fill_with>
  	y = 10;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <start_display+0x130>)
 8000dd8:	220a      	movs	r2, #10
 8000dda:	601a      	str	r2, [r3, #0]
  	x = 10;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <start_display+0x12c>)
 8000dde:	220a      	movs	r2, #10
 8000de0:	601a      	str	r2, [r3, #0]
  }
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000a590 	.word	0x2000a590
 8000df0:	08003a70 	.word	0x08003a70
 8000df4:	2000a594 	.word	0x2000a594
 8000df8:	08003a88 	.word	0x08003a88
 8000dfc:	08003aa0 	.word	0x08003aa0
 8000e00:	200002fc 	.word	0x200002fc
 8000e04:	20000300 	.word	0x20000300

08000e08 <HAL_GPIO_EXTI_Callback>:

  int start_display_flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e18:	d028      	beq.n	8000e6c <HAL_GPIO_EXTI_Callback+0x64>
 8000e1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e1e:	dc2c      	bgt.n	8000e7a <HAL_GPIO_EXTI_Callback+0x72>
 8000e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e24:	d015      	beq.n	8000e52 <HAL_GPIO_EXTI_Callback+0x4a>
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e2a:	dc26      	bgt.n	8000e7a <HAL_GPIO_EXTI_Callback+0x72>
 8000e2c:	2b80      	cmp	r3, #128	@ 0x80
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_EXTI_Callback+0x30>
 8000e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e34:	d006      	beq.n	8000e44 <HAL_GPIO_EXTI_Callback+0x3c>
			i2c_check_for_start();
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SDA_IT_FALLING_Pin);
		    break;

		default:
		    break;
 8000e36:	e020      	b.n	8000e7a <HAL_GPIO_EXTI_Callback+0x72>
			i2c_read_data();
 8000e38:	f7ff fc70 	bl	800071c <i2c_read_data>
		    __HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SCL_IT_RISING_Pin);
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	615a      	str	r2, [r3, #20]
		    break;
 8000e42:	e01b      	b.n	8000e7c <HAL_GPIO_EXTI_Callback+0x74>
			i2c_scl_falling();
 8000e44:	f7ff fd0e 	bl	8000864 <i2c_scl_falling>
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SCL_IT_FALLING_Pin);
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e4e:	615a      	str	r2, [r3, #20]
		    break;
 8000e50:	e014      	b.n	8000e7c <HAL_GPIO_EXTI_Callback+0x74>
			if(i2c_check_for_stop() == I2C_STOP)
 8000e52:	f7ff fce3 	bl	800081c <i2c_check_for_stop>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <HAL_GPIO_EXTI_Callback+0x5a>
				start_display_flag = 1;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SDA_IT_RISING_Pin);
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e68:	615a      	str	r2, [r3, #20]
		    break;
 8000e6a:	e007      	b.n	8000e7c <HAL_GPIO_EXTI_Callback+0x74>
			i2c_check_for_start();
 8000e6c:	f7ff fcba 	bl	80007e4 <i2c_check_for_start>
			__HAL_GPIO_EXTI_CLEAR_IT(ANALYZER_SDA_IT_FALLING_Pin);
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e76:	615a      	str	r2, [r3, #20]
		    break;
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_EXTI_Callback+0x74>
		    break;
 8000e7a:	bf00      	nop
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40013c00 	.word	0x40013c00
 8000e88:	2000a5b4 	.word	0x2000a5b4

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f000 fa26 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f81a 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f7ff fb82 	bl	80005a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9c:	f7ff fb60 	bl	8000560 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ea0:	f000 f884 	bl	8000fac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000ea4:	f7ff fd8c 	bl	80009c0 <lcd_init>
  fill_with(BLACK);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fe25 	bl	8000af8 <fill_with>
  lcd_copy();
 8000eae:	f7ff fe41 	bl	8000b34 <lcd_copy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (start_display_flag == 1)
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <main+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d1fb      	bne.n	8000eb2 <main+0x26>
	  {
		  start_display();
 8000eba:	f7ff ff0b 	bl	8000cd4 <start_display>
		  start_display_flag = 0;
 8000ebe:	4b02      	ldr	r3, [pc, #8]	@ (8000ec8 <main+0x3c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
	  if (start_display_flag == 1)
 8000ec4:	e7f5      	b.n	8000eb2 <main+0x26>
 8000ec6:	bf00      	nop
 8000ec8:	2000a5b4 	.word	0x2000a5b4

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	@ 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 f93c 	bl	8003158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f30:	2310      	movs	r3, #16
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f40:	23a8      	movs	r3, #168	@ 0xa8
 8000f42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 f8c3 	bl	80020dc <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f5c:	f000 f820 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fb24 	bl	80025cc <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f8a:	f000 f809 	bl	8000fa0 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3750      	adds	r7, #80	@ 0x50
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <MX_SPI1_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ffe:	f001 fc91 	bl	8002924 <HAL_SPI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001008:	f7ff ffca 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000a5b8 	.word	0x2000a5b8
 8001014:	40013000 	.word	0x40013000

08001018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a30      	ldr	r2, [pc, #192]	@ (80010f8 <HAL_SPI_MspInit+0xe0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d159      	bne.n	80010ee <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <HAL_SPI_MspInit+0xe4>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a2e      	ldr	r2, [pc, #184]	@ (80010fc <HAL_SPI_MspInit+0xe4>)
 8001044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <HAL_SPI_MspInit+0xe4>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <HAL_SPI_MspInit+0xe4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <HAL_SPI_MspInit+0xe4>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <HAL_SPI_MspInit+0xe4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SPI1_SCK_Pin|LCD_SPI1_MOSI_Pin;
 8001072:	23a0      	movs	r3, #160	@ 0xa0
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001082:	2305      	movs	r3, #5
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	481c      	ldr	r0, [pc, #112]	@ (8001100 <HAL_SPI_MspInit+0xe8>)
 800108e:	f000 fe3f 	bl	8001d10 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 8001094:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <HAL_SPI_MspInit+0xf0>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 800109a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800109e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010a2:	2240      	movs	r2, #64	@ 0x40
 80010a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010d2:	480c      	ldr	r0, [pc, #48]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010d4:	f000 faac 	bl	8001630 <HAL_DMA_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80010de:	f7ff ff5f 	bl	8000fa0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010e6:	649a      	str	r2, [r3, #72]	@ 0x48
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_SPI_MspInit+0xec>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40013000 	.word	0x40013000
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	2000a610 	.word	0x2000a610
 8001108:	40026458 	.word	0x40026458

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_MspInit+0x4c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <HAL_MspInit+0x4c>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <HAL_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_MspInit+0x4c>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <HAL_MspInit+0x4c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	@ 0x40
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_MspInit+0x4c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b2:	f000 f8e7 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}

080011ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SCL_IT_RISING_Pin);
 80011be:	2080      	movs	r0, #128	@ 0x80
 80011c0:	f000 ff74 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SCL_IT_FALLING_Pin);
 80011c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011c8:	f000 ff70 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SDA_IT_RISING_Pin);
 80011d4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80011d8:	f000 ff68 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ANALYZER_SDA_IT_FALLING_Pin);
 80011dc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80011e0:	f000 ff64 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <DMA2_Stream3_IRQHandler+0x10>)
 80011ee:	f000 fb25 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000a610 	.word	0x2000a610

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f001 ff9c 	bl	8003168 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	2000a670 	.word	0x2000a670
 8001264:	2000a7c0 	.word	0x2000a7c0

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001290:	f7ff ffea 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f001 ff5b 	bl	8003174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff fde5 	bl	8000e8c <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80012d0:	08003b9c 	.word	0x08003b9c
  ldr r2, =_sbss
 80012d4:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80012d8:	2000a7c0 	.word	0x2000a7c0

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f94f 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	200f      	movs	r0, #15
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fefa 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f967 	bl	8001616 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f92f 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	@ (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000304 	.word	0x20000304
 800137c:	2000030c 	.word	0x2000030c
 8001380:	20000308 	.word	0x20000308

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000030c 	.word	0x2000030c
 80013a8:	2000a674 	.word	0x2000a674

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000a674 	.word	0x2000a674

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000030c 	.word	0x2000030c

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	@ (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff29 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff3e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff8e 	bl	8001500 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff31 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff feb6 	bl	80013ac <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e099      	b.n	8001780 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166c:	e00f      	b.n	800168e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166e:	f7ff fe9d 	bl	80013ac <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b05      	cmp	r3, #5
 800167a:	d908      	bls.n	800168e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2220      	movs	r2, #32
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e078      	b.n	8001780 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e8      	bne.n	800166e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <HAL_DMA_Init+0x158>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4313      	orrs	r3, r2
 80016de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d107      	bne.n	80016f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4313      	orrs	r3, r2
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f023 0307 	bic.w	r3, r3, #7
 800170e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4313      	orrs	r3, r2
 8001718:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	2b04      	cmp	r3, #4
 8001720:	d117      	bne.n	8001752 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4313      	orrs	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00e      	beq.n	8001752 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fa6f 	bl	8001c18 <DMA_CheckFifoParam>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2240      	movs	r2, #64	@ 0x40
 8001744:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800174e:	2301      	movs	r3, #1
 8001750:	e016      	b.n	8001780 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fa26 	bl	8001bac <DMA_CalcBaseAndBitshift>
 8001760:	4603      	mov	r3, r0
 8001762:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001768:	223f      	movs	r2, #63	@ 0x3f
 800176a:	409a      	lsls	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	f010803f 	.word	0xf010803f

0800178c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_DMA_Start_IT+0x26>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e040      	b.n	8001834 <HAL_DMA_Start_IT+0xa8>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d12f      	bne.n	8001826 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f9b8 	bl	8001b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e4:	223f      	movs	r2, #63	@ 0x3f
 80017e6:	409a      	lsls	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0216 	orr.w	r2, r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	e005      	b.n	8001832 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800182e:	2302      	movs	r3, #2
 8001830:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001832:	7dfb      	ldrb	r3, [r7, #23]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001848:	4b8e      	ldr	r3, [pc, #568]	@ (8001a84 <HAL_DMA_IRQHandler+0x248>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a88 <HAL_DMA_IRQHandler+0x24c>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0a9b      	lsrs	r3, r3, #10
 8001854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001866:	2208      	movs	r2, #8
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01a      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0204 	bic.w	r2, r2, #4
 800188e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001894:	2208      	movs	r2, #8
 8001896:	409a      	lsls	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ac:	2201      	movs	r2, #1
 80018ae:	409a      	lsls	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d012      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ca:	2201      	movs	r2, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	2204      	movs	r2, #4
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001900:	2204      	movs	r2, #4
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	f043 0204 	orr.w	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	2210      	movs	r2, #16
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d043      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03c      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	2210      	movs	r2, #16
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d018      	beq.n	800197e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d108      	bne.n	800196c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d024      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
 800196a:	e01f      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01b      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
 800197c:	e016      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0208 	bic.w	r2, r2, #8
 800199a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b0:	2220      	movs	r2, #32
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 808f 	beq.w	8001adc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8087 	beq.w	8001adc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	2220      	movs	r2, #32
 80019d4:	409a      	lsls	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d136      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0216 	bic.w	r2, r2, #22
 80019f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <HAL_DMA_IRQHandler+0x1da>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	223f      	movs	r2, #63	@ 0x3f
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d07e      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
        }
        return;
 8001a52:	e079      	b.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01d      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d031      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4798      	blx	r3
 8001a80:	e02c      	b.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
 8001a82:	bf00      	nop
 8001a84:	20000304 	.word	0x20000304
 8001a88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e01e      	b.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0210 	bic.w	r2, r2, #16
 8001aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d032      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2205      	movs	r2, #5
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d307      	bcc.n	8001b24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f2      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x2cc>
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
 8001b46:	e000      	b.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b48:	bf00      	nop
    }
  }
}
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b40      	cmp	r3, #64	@ 0x40
 8001b7c:	d108      	bne.n	8001b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b8e:	e007      	b.n	8001ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	3b10      	subs	r3, #16
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <DMA_CalcBaseAndBitshift+0x64>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bc6:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <DMA_CalcBaseAndBitshift+0x68>)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d909      	bls.n	8001bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	1d1a      	adds	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bec:	e007      	b.n	8001bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	aaaaaaab 	.word	0xaaaaaaab
 8001c14:	08003b50 	.word	0x08003b50

08001c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d11f      	bne.n	8001c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d856      	bhi.n	8001ce6 <DMA_CheckFifoParam+0xce>
 8001c38:	a201      	add	r2, pc, #4	@ (adr r2, 8001c40 <DMA_CheckFifoParam+0x28>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c63 	.word	0x08001c63
 8001c48:	08001c51 	.word	0x08001c51
 8001c4c:	08001ce7 	.word	0x08001ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d046      	beq.n	8001cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c60:	e043      	b.n	8001cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c6a:	d140      	bne.n	8001cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c70:	e03d      	b.n	8001cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c7a:	d121      	bne.n	8001cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d837      	bhi.n	8001cf2 <DMA_CheckFifoParam+0xda>
 8001c82:	a201      	add	r2, pc, #4	@ (adr r2, 8001c88 <DMA_CheckFifoParam+0x70>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001c99 	.word	0x08001c99
 8001c8c:	08001c9f 	.word	0x08001c9f
 8001c90:	08001c99 	.word	0x08001c99
 8001c94:	08001cb1 	.word	0x08001cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9c:	e030      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d025      	beq.n	8001cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cae:	e022      	b.n	8001cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cb8:	d11f      	bne.n	8001cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cbe:	e01c      	b.n	8001cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d903      	bls.n	8001cce <DMA_CheckFifoParam+0xb6>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d003      	beq.n	8001cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ccc:	e018      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd2:	e015      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00e      	beq.n	8001cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce4:	e00b      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      break;
 8001ce6:	bf00      	nop
 8001ce8:	e00a      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
 8001cec:	e008      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      break;
 8001cee:	bf00      	nop
 8001cf0:	e006      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf2:	bf00      	nop
 8001cf4:	e004      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf6:	bf00      	nop
 8001cf8:	e002      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cfa:	bf00      	nop
 8001cfc:	e000      	b.n	8001d00 <DMA_CheckFifoParam+0xe8>
      break;
 8001cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e16b      	b.n	8002004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 815a 	bne.w	8001ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d005      	beq.n	8001d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d130      	bne.n	8001dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d017      	beq.n	8001e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d123      	bne.n	8001e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80b4 	beq.w	8001ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b60      	ldr	r3, [pc, #384]	@ (800201c <HAL_GPIO_Init+0x30c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	4a5f      	ldr	r2, [pc, #380]	@ (800201c <HAL_GPIO_Init+0x30c>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800201c <HAL_GPIO_Init+0x30c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8002020 <HAL_GPIO_Init+0x310>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	@ (8002024 <HAL_GPIO_Init+0x314>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d02b      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a51      	ldr	r2, [pc, #324]	@ (8002028 <HAL_GPIO_Init+0x318>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d025      	beq.n	8001f32 <HAL_GPIO_Init+0x222>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a50      	ldr	r2, [pc, #320]	@ (800202c <HAL_GPIO_Init+0x31c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01f      	beq.n	8001f2e <HAL_GPIO_Init+0x21e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <HAL_GPIO_Init+0x320>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d019      	beq.n	8001f2a <HAL_GPIO_Init+0x21a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0x216>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	@ (8002038 <HAL_GPIO_Init+0x328>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_GPIO_Init+0x212>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	@ (800203c <HAL_GPIO_Init+0x32c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x20e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	@ (8002040 <HAL_GPIO_Init+0x330>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_GPIO_Init+0x20a>
 8001f16:	2307      	movs	r3, #7
 8001f18:	e00e      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	e00c      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f1e:	2306      	movs	r3, #6
 8001f20:	e00a      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f22:	2305      	movs	r3, #5
 8001f24:	e008      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f36:	2300      	movs	r3, #0
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	f002 0203 	and.w	r2, r2, #3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4093      	lsls	r3, r2
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f48:	4935      	ldr	r1, [pc, #212]	@ (8002020 <HAL_GPIO_Init+0x310>)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f56:	4b3b      	ldr	r3, [pc, #236]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7a:	4a32      	ldr	r2, [pc, #200]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f80:	4b30      	ldr	r3, [pc, #192]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa4:	4a27      	ldr	r2, [pc, #156]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001faa:	4b26      	ldr	r3, [pc, #152]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fce:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff8:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <HAL_GPIO_Init+0x334>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3301      	adds	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	f67f ae90 	bls.w	8001d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40013800 	.word	0x40013800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400
 800202c:	40020800 	.word	0x40020800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40021000 	.word	0x40021000
 8002038:	40021400 	.word	0x40021400
 800203c:	40021800 	.word	0x40021800
 8002040:	40021c00 	.word	0x40021c00
 8002044:	40013c00 	.word	0x40013c00

08002048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e001      	b.n	800206a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fe9c 	bl	8000e08 <HAL_GPIO_EXTI_Callback>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40013c00 	.word	0x40013c00

080020dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e267      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d075      	beq.n	80021e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fa:	4b88      	ldr	r3, [pc, #544]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d00c      	beq.n	8002120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002106:	4b85      	ldr	r3, [pc, #532]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210e:	2b08      	cmp	r3, #8
 8002110:	d112      	bne.n	8002138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b82      	ldr	r3, [pc, #520]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800211e:	d10b      	bne.n	8002138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	4b7e      	ldr	r3, [pc, #504]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05b      	beq.n	80021e4 <HAL_RCC_OscConfig+0x108>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d157      	bne.n	80021e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e242      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x74>
 8002142:	4b76      	ldr	r3, [pc, #472]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a75      	ldr	r2, [pc, #468]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xb0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x98>
 800215a:	4b70      	ldr	r3, [pc, #448]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6f      	ldr	r2, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6d      	ldr	r3, [pc, #436]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6c      	ldr	r2, [pc, #432]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xb0>
 8002174:	4b69      	ldr	r3, [pc, #420]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a68      	ldr	r2, [pc, #416]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b66      	ldr	r3, [pc, #408]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a65      	ldr	r2, [pc, #404]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff f90a 	bl	80013ac <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff f906 	bl	80013ac <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e207      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b5b      	ldr	r3, [pc, #364]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xc0>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff f8f6 	bl	80013ac <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff f8f2 	bl	80013ac <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	@ 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1f3      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b51      	ldr	r3, [pc, #324]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0xe8>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f2:	4b4a      	ldr	r3, [pc, #296]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fe:	4b47      	ldr	r3, [pc, #284]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b44      	ldr	r3, [pc, #272]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x152>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1c7      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4937      	ldr	r1, [pc, #220]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_RCC_OscConfig+0x244>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7ff f8ab 	bl	80013ac <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225a:	f7ff f8a7 	bl	80013ac <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1a8      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b28      	ldr	r3, [pc, #160]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4925      	ldr	r1, [pc, #148]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <HAL_RCC_OscConfig+0x244>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff f88a 	bl	80013ac <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229c:	f7ff f886 	bl	80013ac <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e187      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d036      	beq.n	8002334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_RCC_OscConfig+0x248>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff f86a 	bl	80013ac <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff f866 	bl	80013ac <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e167      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_RCC_OscConfig+0x240>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x200>
 80022fa:	e01b      	b.n	8002334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_RCC_OscConfig+0x248>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7ff f853 	bl	80013ac <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	e00e      	b.n	8002328 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230a:	f7ff f84f 	bl	80013ac <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d907      	bls.n	8002328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e150      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
 800231c:	40023800 	.word	0x40023800
 8002320:	42470000 	.word	0x42470000
 8002324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b88      	ldr	r3, [pc, #544]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ea      	bne.n	800230a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8097 	beq.w	8002470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b81      	ldr	r3, [pc, #516]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b7d      	ldr	r3, [pc, #500]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	4a7c      	ldr	r2, [pc, #496]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	@ 0x40
 8002362:	4b7a      	ldr	r3, [pc, #488]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b77      	ldr	r3, [pc, #476]	@ (8002550 <HAL_RCC_OscConfig+0x474>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b74      	ldr	r3, [pc, #464]	@ (8002550 <HAL_RCC_OscConfig+0x474>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	@ (8002550 <HAL_RCC_OscConfig+0x474>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7ff f80f 	bl	80013ac <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7ff f80b 	bl	80013ac <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e10c      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002550 <HAL_RCC_OscConfig+0x474>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2ea>
 80023b8:	4b64      	ldr	r3, [pc, #400]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023bc:	4a63      	ldr	r2, [pc, #396]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x324>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x30c>
 80023ce:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	4a5e      	ldr	r2, [pc, #376]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023da:	4b5c      	ldr	r3, [pc, #368]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023de:	4a5b      	ldr	r2, [pc, #364]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0x324>
 80023e8:	4b58      	ldr	r3, [pc, #352]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ec:	4a57      	ldr	r2, [pc, #348]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f4:	4b55      	ldr	r3, [pc, #340]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	4a54      	ldr	r2, [pc, #336]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe ffd0 	bl	80013ac <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe ffcc 	bl	80013ac <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0cb      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	4b49      	ldr	r3, [pc, #292]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ee      	beq.n	8002410 <HAL_RCC_OscConfig+0x334>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe ffba 	bl	80013ac <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe ffb6 	bl	80013ac <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0b5      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	4b3e      	ldr	r3, [pc, #248]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ee      	bne.n	800243c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b39      	ldr	r3, [pc, #228]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	4a38      	ldr	r2, [pc, #224]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a1 	beq.w	80025bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247a:	4b34      	ldr	r3, [pc, #208]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b08      	cmp	r3, #8
 8002484:	d05c      	beq.n	8002540 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d141      	bne.n	8002512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b31      	ldr	r3, [pc, #196]	@ (8002554 <HAL_RCC_OscConfig+0x478>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe ff8a 	bl	80013ac <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe ff86 	bl	80013ac <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e087      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b27      	ldr	r3, [pc, #156]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	491b      	ldr	r1, [pc, #108]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_RCC_OscConfig+0x478>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe ff5f 	bl	80013ac <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe ff5b 	bl	80013ac <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e05c      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x416>
 8002510:	e054      	b.n	80025bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <HAL_RCC_OscConfig+0x478>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe ff48 	bl	80013ac <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe ff44 	bl	80013ac <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e045      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_RCC_OscConfig+0x470>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x444>
 800253e:	e03d      	b.n	80025bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e038      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
 800254c:	40023800 	.word	0x40023800
 8002550:	40007000 	.word	0x40007000
 8002554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_OscConfig+0x4ec>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d028      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d121      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d11a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002588:	4013      	ands	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800258e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	4293      	cmp	r3, r2
 8002592:	d111      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0cc      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b68      	ldr	r3, [pc, #416]	@ (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d90c      	bls.n	8002608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b65      	ldr	r3, [pc, #404]	@ (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	@ (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a58      	ldr	r2, [pc, #352]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800262a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a52      	ldr	r2, [pc, #328]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d044      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d119      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	2b03      	cmp	r3, #3
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b3f      	ldr	r3, [pc, #252]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3b      	ldr	r3, [pc, #236]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e067      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4934      	ldr	r1, [pc, #208]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fe76 	bl	80013ac <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fe fe72 	bl	80013ac <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d20c      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b22      	ldr	r3, [pc, #136]	@ (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	@ (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f821 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490a      	ldr	r1, [pc, #40]	@ (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fdd6 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00
 8002788:	40023800 	.word	0x40023800
 800278c:	08003b40 	.word	0x08003b40
 8002790:	20000304 	.word	0x20000304
 8002794:	20000308 	.word	0x20000308

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800279c:	b090      	sub	sp, #64	@ 0x40
 800279e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027a4:	2300      	movs	r3, #0
 80027a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b0:	4b59      	ldr	r3, [pc, #356]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d00d      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x40>
 80027bc:	2b08      	cmp	r3, #8
 80027be:	f200 80a1 	bhi.w	8002904 <HAL_RCC_GetSysClockFreq+0x16c>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x34>
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ca:	e09b      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_RCC_GetSysClockFreq+0x184>)
 80027ce:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80027d0:	e09b      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d2:	4b53      	ldr	r3, [pc, #332]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027d6:	e098      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x180>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x180>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d028      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	2200      	movs	r2, #0
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002800:	2100      	movs	r1, #0
 8002802:	4b47      	ldr	r3, [pc, #284]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x188>)
 8002804:	fb03 f201 	mul.w	r2, r3, r1
 8002808:	2300      	movs	r3, #0
 800280a:	fb00 f303 	mul.w	r3, r0, r3
 800280e:	4413      	add	r3, r2
 8002810:	4a43      	ldr	r2, [pc, #268]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x188>)
 8002812:	fba0 1202 	umull	r1, r2, r0, r2
 8002816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002818:	460a      	mov	r2, r1
 800281a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800281c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800281e:	4413      	add	r3, r2
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002824:	2200      	movs	r2, #0
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	61fa      	str	r2, [r7, #28]
 800282a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800282e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002832:	f7fd fd1d 	bl	8000270 <__aeabi_uldivmod>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4613      	mov	r3, r2
 800283c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800283e:	e053      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002840:	4b35      	ldr	r3, [pc, #212]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x180>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	2200      	movs	r2, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	617a      	str	r2, [r7, #20]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002852:	f04f 0b00 	mov.w	fp, #0
 8002856:	4652      	mov	r2, sl
 8002858:	465b      	mov	r3, fp
 800285a:	f04f 0000 	mov.w	r0, #0
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	0159      	lsls	r1, r3, #5
 8002864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002868:	0150      	lsls	r0, r2, #5
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	ebb2 080a 	subs.w	r8, r2, sl
 8002872:	eb63 090b 	sbc.w	r9, r3, fp
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002882:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002886:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800288a:	ebb2 0408 	subs.w	r4, r2, r8
 800288e:	eb63 0509 	sbc.w	r5, r3, r9
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	00eb      	lsls	r3, r5, #3
 800289c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a0:	00e2      	lsls	r2, r4, #3
 80028a2:	4614      	mov	r4, r2
 80028a4:	461d      	mov	r5, r3
 80028a6:	eb14 030a 	adds.w	r3, r4, sl
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	eb45 030b 	adc.w	r3, r5, fp
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028be:	4629      	mov	r1, r5
 80028c0:	028b      	lsls	r3, r1, #10
 80028c2:	4621      	mov	r1, r4
 80028c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c8:	4621      	mov	r1, r4
 80028ca:	028a      	lsls	r2, r1, #10
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d2:	2200      	movs	r2, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	60fa      	str	r2, [r7, #12]
 80028d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028dc:	f7fd fcc8 	bl	8000270 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4613      	mov	r3, r2
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80028f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002902:	e002      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_RCC_GetSysClockFreq+0x184>)
 8002906:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800290c:	4618      	mov	r0, r3
 800290e:	3740      	adds	r7, #64	@ 0x40
 8002910:	46bd      	mov	sp, r7
 8002912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	00f42400 	.word	0x00f42400
 8002920:	017d7840 	.word	0x017d7840

08002924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07b      	b.n	8002a2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002946:	d009      	beq.n	800295c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
 800294e:	e005      	b.n	800295c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fb4e 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e0:	ea42 0103 	orr.w	r1, r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0104 	and.w	r1, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	f003 0210 	and.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_SPI_Transmit+0x22>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e12d      	b.n	8002cb4 <HAL_SPI_Transmit+0x27e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a60:	f7fe fca4 	bl	80013ac <HAL_GetTick>
 8002a64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d002      	beq.n	8002a7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a7a:	e116      	b.n	8002caa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_SPI_Transmit+0x52>
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a8c:	e10d      	b.n	8002caa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad4:	d10f      	bne.n	8002af6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002af4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b00:	2b40      	cmp	r3, #64	@ 0x40
 8002b02:	d007      	beq.n	8002b14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b1c:	d14f      	bne.n	8002bbe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_SPI_Transmit+0xf6>
 8002b26:	8afb      	ldrh	r3, [r7, #22]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d142      	bne.n	8002bb2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	881a      	ldrh	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	1c9a      	adds	r2, r3, #2
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b50:	e02f      	b.n	8002bb2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d112      	bne.n	8002b86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	1c9a      	adds	r2, r3, #2
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b84:	e015      	b.n	8002bb2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b86:	f7fe fc11 	bl	80013ac <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d803      	bhi.n	8002b9e <HAL_SPI_Transmit+0x168>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d102      	bne.n	8002ba4 <HAL_SPI_Transmit+0x16e>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002bb0:	e07b      	b.n	8002caa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ca      	bne.n	8002b52 <HAL_SPI_Transmit+0x11c>
 8002bbc:	e050      	b.n	8002c60 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_SPI_Transmit+0x196>
 8002bc6:	8afb      	ldrh	r3, [r7, #22]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d144      	bne.n	8002c56 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	7812      	ldrb	r2, [r2, #0]
 8002bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bf2:	e030      	b.n	8002c56 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d113      	bne.n	8002c2a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c28:	e015      	b.n	8002c56 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c2a:	f7fe fbbf 	bl	80013ac <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d803      	bhi.n	8002c42 <HAL_SPI_Transmit+0x20c>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d102      	bne.n	8002c48 <HAL_SPI_Transmit+0x212>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002c54:	e029      	b.n	8002caa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1c9      	bne.n	8002bf4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	6839      	ldr	r1, [r7, #0]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fa03 	bl	8003070 <SPI_EndRxTxTransaction>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e003      	b.n	8002caa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_SPI_Transmit_DMA+0x20>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e097      	b.n	8002e0c <HAL_SPI_Transmit_DMA+0x150>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cf4:	e085      	b.n	8002e02 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_SPI_Transmit_DMA+0x46>
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d06:	e07c      	b.n	8002e02 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4e:	d10f      	bne.n	8002d70 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d74:	4a27      	ldr	r2, [pc, #156]	@ (8002e14 <HAL_SPI_Transmit_DMA+0x158>)
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7c:	4a26      	ldr	r2, [pc, #152]	@ (8002e18 <HAL_SPI_Transmit_DMA+0x15c>)
 8002d7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d84:	4a25      	ldr	r2, [pc, #148]	@ (8002e1c <HAL_SPI_Transmit_DMA+0x160>)
 8002d86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	4619      	mov	r1, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002da6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002da8:	f7fe fcf0 	bl	800178c <HAL_DMA_Start_IT>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002dc2:	e01e      	b.n	8002e02 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dce:	2b40      	cmp	r3, #64	@ 0x40
 8002dd0:	d007      	beq.n	8002de2 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0220 	orr.w	r2, r2, #32
 8002df0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0202 	orr.w	r2, r2, #2
 8002e00:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	08002f05 	.word	0x08002f05
 8002e18:	08002e5d 	.word	0x08002e5d
 8002e1c:	08002f21 	.word	0x08002f21

08002e20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e6a:	f7fe fa9f 	bl	80013ac <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7e:	d03b      	beq.n	8002ef8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0220 	bic.w	r2, r2, #32
 8002e8e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0202 	bic.w	r2, r2, #2
 8002e9e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	2164      	movs	r1, #100	@ 0x64
 8002ea4:	6978      	ldr	r0, [r7, #20]
 8002ea6:	f000 f8e3 	bl	8003070 <SPI_EndRxTxTransaction>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002ef0:	6978      	ldr	r0, [r7, #20]
 8002ef2:	f7ff ffa9 	bl	8002e48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ef6:	e002      	b.n	8002efe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002ef8:	6978      	ldr	r0, [r7, #20]
 8002efa:	f7ff ff91 	bl	8002e20 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff8e 	bl	8002e34 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0203 	bic.w	r2, r2, #3
 8002f3c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff ff78 	bl	8002e48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f70:	f7fe fa1c 	bl	80013ac <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f80:	f7fe fa14 	bl	80013ac <HAL_GetTick>
 8002f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f86:	4b39      	ldr	r3, [pc, #228]	@ (800306c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	015b      	lsls	r3, r3, #5
 8002f8c:	0d1b      	lsrs	r3, r3, #20
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f96:	e054      	b.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d050      	beq.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fa0:	f7fe fa04 	bl	80013ac <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d902      	bls.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d13d      	bne.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fce:	d111      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd8:	d004      	beq.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe2:	d107      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffc:	d10f      	bne.n	800301e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800301c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e017      	b.n	8003062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3b01      	subs	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d19b      	bne.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000304 	.word	0x20000304

08003070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2201      	movs	r2, #1
 8003084:	2102      	movs	r1, #2
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ff6a 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e032      	b.n	8003108 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <SPI_EndRxTxTransaction+0xa0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <SPI_EndRxTxTransaction+0xa4>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	0d5b      	lsrs	r3, r3, #21
 80030ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030c0:	d112      	bne.n	80030e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2180      	movs	r1, #128	@ 0x80
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff47 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d016      	beq.n	8003106 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e00f      	b.n	8003108 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fe:	2b80      	cmp	r3, #128	@ 0x80
 8003100:	d0f2      	beq.n	80030e8 <SPI_EndRxTxTransaction+0x78>
 8003102:	e000      	b.n	8003106 <SPI_EndRxTxTransaction+0x96>
        break;
 8003104:	bf00      	nop
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000304 	.word	0x20000304
 8003114:	165e9f81 	.word	0x165e9f81

08003118 <siprintf>:
 8003118:	b40e      	push	{r1, r2, r3}
 800311a:	b500      	push	{lr}
 800311c:	b09c      	sub	sp, #112	@ 0x70
 800311e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003120:	9002      	str	r0, [sp, #8]
 8003122:	9006      	str	r0, [sp, #24]
 8003124:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003128:	4809      	ldr	r0, [pc, #36]	@ (8003150 <siprintf+0x38>)
 800312a:	9107      	str	r1, [sp, #28]
 800312c:	9104      	str	r1, [sp, #16]
 800312e:	4909      	ldr	r1, [pc, #36]	@ (8003154 <siprintf+0x3c>)
 8003130:	f853 2b04 	ldr.w	r2, [r3], #4
 8003134:	9105      	str	r1, [sp, #20]
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	a902      	add	r1, sp, #8
 800313c:	f000 f994 	bl	8003468 <_svfiprintf_r>
 8003140:	9b02      	ldr	r3, [sp, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	b01c      	add	sp, #112	@ 0x70
 8003148:	f85d eb04 	ldr.w	lr, [sp], #4
 800314c:	b003      	add	sp, #12
 800314e:	4770      	bx	lr
 8003150:	20000310 	.word	0x20000310
 8003154:	ffff0208 	.word	0xffff0208

08003158 <memset>:
 8003158:	4402      	add	r2, r0
 800315a:	4603      	mov	r3, r0
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	f803 1b01 	strb.w	r1, [r3], #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <__errno>:
 8003168:	4b01      	ldr	r3, [pc, #4]	@ (8003170 <__errno+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000310 	.word	0x20000310

08003174 <__libc_init_array>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4d0d      	ldr	r5, [pc, #52]	@ (80031ac <__libc_init_array+0x38>)
 8003178:	4c0d      	ldr	r4, [pc, #52]	@ (80031b0 <__libc_init_array+0x3c>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	2600      	movs	r6, #0
 8003180:	42a6      	cmp	r6, r4
 8003182:	d109      	bne.n	8003198 <__libc_init_array+0x24>
 8003184:	4d0b      	ldr	r5, [pc, #44]	@ (80031b4 <__libc_init_array+0x40>)
 8003186:	4c0c      	ldr	r4, [pc, #48]	@ (80031b8 <__libc_init_array+0x44>)
 8003188:	f000 fc66 	bl	8003a58 <_init>
 800318c:	1b64      	subs	r4, r4, r5
 800318e:	10a4      	asrs	r4, r4, #2
 8003190:	2600      	movs	r6, #0
 8003192:	42a6      	cmp	r6, r4
 8003194:	d105      	bne.n	80031a2 <__libc_init_array+0x2e>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	f855 3b04 	ldr.w	r3, [r5], #4
 800319c:	4798      	blx	r3
 800319e:	3601      	adds	r6, #1
 80031a0:	e7ee      	b.n	8003180 <__libc_init_array+0xc>
 80031a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a6:	4798      	blx	r3
 80031a8:	3601      	adds	r6, #1
 80031aa:	e7f2      	b.n	8003192 <__libc_init_array+0x1e>
 80031ac:	08003b94 	.word	0x08003b94
 80031b0:	08003b94 	.word	0x08003b94
 80031b4:	08003b94 	.word	0x08003b94
 80031b8:	08003b98 	.word	0x08003b98

080031bc <__retarget_lock_acquire_recursive>:
 80031bc:	4770      	bx	lr

080031be <__retarget_lock_release_recursive>:
 80031be:	4770      	bx	lr

080031c0 <_free_r>:
 80031c0:	b538      	push	{r3, r4, r5, lr}
 80031c2:	4605      	mov	r5, r0
 80031c4:	2900      	cmp	r1, #0
 80031c6:	d041      	beq.n	800324c <_free_r+0x8c>
 80031c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031cc:	1f0c      	subs	r4, r1, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bfb8      	it	lt
 80031d2:	18e4      	addlt	r4, r4, r3
 80031d4:	f000 f8e0 	bl	8003398 <__malloc_lock>
 80031d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <_free_r+0x90>)
 80031da:	6813      	ldr	r3, [r2, #0]
 80031dc:	b933      	cbnz	r3, 80031ec <_free_r+0x2c>
 80031de:	6063      	str	r3, [r4, #4]
 80031e0:	6014      	str	r4, [r2, #0]
 80031e2:	4628      	mov	r0, r5
 80031e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031e8:	f000 b8dc 	b.w	80033a4 <__malloc_unlock>
 80031ec:	42a3      	cmp	r3, r4
 80031ee:	d908      	bls.n	8003202 <_free_r+0x42>
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	1821      	adds	r1, r4, r0
 80031f4:	428b      	cmp	r3, r1
 80031f6:	bf01      	itttt	eq
 80031f8:	6819      	ldreq	r1, [r3, #0]
 80031fa:	685b      	ldreq	r3, [r3, #4]
 80031fc:	1809      	addeq	r1, r1, r0
 80031fe:	6021      	streq	r1, [r4, #0]
 8003200:	e7ed      	b.n	80031de <_free_r+0x1e>
 8003202:	461a      	mov	r2, r3
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	b10b      	cbz	r3, 800320c <_free_r+0x4c>
 8003208:	42a3      	cmp	r3, r4
 800320a:	d9fa      	bls.n	8003202 <_free_r+0x42>
 800320c:	6811      	ldr	r1, [r2, #0]
 800320e:	1850      	adds	r0, r2, r1
 8003210:	42a0      	cmp	r0, r4
 8003212:	d10b      	bne.n	800322c <_free_r+0x6c>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	4401      	add	r1, r0
 8003218:	1850      	adds	r0, r2, r1
 800321a:	4283      	cmp	r3, r0
 800321c:	6011      	str	r1, [r2, #0]
 800321e:	d1e0      	bne.n	80031e2 <_free_r+0x22>
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	6053      	str	r3, [r2, #4]
 8003226:	4408      	add	r0, r1
 8003228:	6010      	str	r0, [r2, #0]
 800322a:	e7da      	b.n	80031e2 <_free_r+0x22>
 800322c:	d902      	bls.n	8003234 <_free_r+0x74>
 800322e:	230c      	movs	r3, #12
 8003230:	602b      	str	r3, [r5, #0]
 8003232:	e7d6      	b.n	80031e2 <_free_r+0x22>
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	1821      	adds	r1, r4, r0
 8003238:	428b      	cmp	r3, r1
 800323a:	bf04      	itt	eq
 800323c:	6819      	ldreq	r1, [r3, #0]
 800323e:	685b      	ldreq	r3, [r3, #4]
 8003240:	6063      	str	r3, [r4, #4]
 8003242:	bf04      	itt	eq
 8003244:	1809      	addeq	r1, r1, r0
 8003246:	6021      	streq	r1, [r4, #0]
 8003248:	6054      	str	r4, [r2, #4]
 800324a:	e7ca      	b.n	80031e2 <_free_r+0x22>
 800324c:	bd38      	pop	{r3, r4, r5, pc}
 800324e:	bf00      	nop
 8003250:	2000a7bc 	.word	0x2000a7bc

08003254 <sbrk_aligned>:
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	4e0f      	ldr	r6, [pc, #60]	@ (8003294 <sbrk_aligned+0x40>)
 8003258:	460c      	mov	r4, r1
 800325a:	6831      	ldr	r1, [r6, #0]
 800325c:	4605      	mov	r5, r0
 800325e:	b911      	cbnz	r1, 8003266 <sbrk_aligned+0x12>
 8003260:	f000 fba6 	bl	80039b0 <_sbrk_r>
 8003264:	6030      	str	r0, [r6, #0]
 8003266:	4621      	mov	r1, r4
 8003268:	4628      	mov	r0, r5
 800326a:	f000 fba1 	bl	80039b0 <_sbrk_r>
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	d103      	bne.n	800327a <sbrk_aligned+0x26>
 8003272:	f04f 34ff 	mov.w	r4, #4294967295
 8003276:	4620      	mov	r0, r4
 8003278:	bd70      	pop	{r4, r5, r6, pc}
 800327a:	1cc4      	adds	r4, r0, #3
 800327c:	f024 0403 	bic.w	r4, r4, #3
 8003280:	42a0      	cmp	r0, r4
 8003282:	d0f8      	beq.n	8003276 <sbrk_aligned+0x22>
 8003284:	1a21      	subs	r1, r4, r0
 8003286:	4628      	mov	r0, r5
 8003288:	f000 fb92 	bl	80039b0 <_sbrk_r>
 800328c:	3001      	adds	r0, #1
 800328e:	d1f2      	bne.n	8003276 <sbrk_aligned+0x22>
 8003290:	e7ef      	b.n	8003272 <sbrk_aligned+0x1e>
 8003292:	bf00      	nop
 8003294:	2000a7b8 	.word	0x2000a7b8

08003298 <_malloc_r>:
 8003298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800329c:	1ccd      	adds	r5, r1, #3
 800329e:	f025 0503 	bic.w	r5, r5, #3
 80032a2:	3508      	adds	r5, #8
 80032a4:	2d0c      	cmp	r5, #12
 80032a6:	bf38      	it	cc
 80032a8:	250c      	movcc	r5, #12
 80032aa:	2d00      	cmp	r5, #0
 80032ac:	4606      	mov	r6, r0
 80032ae:	db01      	blt.n	80032b4 <_malloc_r+0x1c>
 80032b0:	42a9      	cmp	r1, r5
 80032b2:	d904      	bls.n	80032be <_malloc_r+0x26>
 80032b4:	230c      	movs	r3, #12
 80032b6:	6033      	str	r3, [r6, #0]
 80032b8:	2000      	movs	r0, #0
 80032ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003394 <_malloc_r+0xfc>
 80032c2:	f000 f869 	bl	8003398 <__malloc_lock>
 80032c6:	f8d8 3000 	ldr.w	r3, [r8]
 80032ca:	461c      	mov	r4, r3
 80032cc:	bb44      	cbnz	r4, 8003320 <_malloc_r+0x88>
 80032ce:	4629      	mov	r1, r5
 80032d0:	4630      	mov	r0, r6
 80032d2:	f7ff ffbf 	bl	8003254 <sbrk_aligned>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	4604      	mov	r4, r0
 80032da:	d158      	bne.n	800338e <_malloc_r+0xf6>
 80032dc:	f8d8 4000 	ldr.w	r4, [r8]
 80032e0:	4627      	mov	r7, r4
 80032e2:	2f00      	cmp	r7, #0
 80032e4:	d143      	bne.n	800336e <_malloc_r+0xd6>
 80032e6:	2c00      	cmp	r4, #0
 80032e8:	d04b      	beq.n	8003382 <_malloc_r+0xea>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	4639      	mov	r1, r7
 80032ee:	4630      	mov	r0, r6
 80032f0:	eb04 0903 	add.w	r9, r4, r3
 80032f4:	f000 fb5c 	bl	80039b0 <_sbrk_r>
 80032f8:	4581      	cmp	r9, r0
 80032fa:	d142      	bne.n	8003382 <_malloc_r+0xea>
 80032fc:	6821      	ldr	r1, [r4, #0]
 80032fe:	1a6d      	subs	r5, r5, r1
 8003300:	4629      	mov	r1, r5
 8003302:	4630      	mov	r0, r6
 8003304:	f7ff ffa6 	bl	8003254 <sbrk_aligned>
 8003308:	3001      	adds	r0, #1
 800330a:	d03a      	beq.n	8003382 <_malloc_r+0xea>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	442b      	add	r3, r5
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	f8d8 3000 	ldr.w	r3, [r8]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	bb62      	cbnz	r2, 8003374 <_malloc_r+0xdc>
 800331a:	f8c8 7000 	str.w	r7, [r8]
 800331e:	e00f      	b.n	8003340 <_malloc_r+0xa8>
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	1b52      	subs	r2, r2, r5
 8003324:	d420      	bmi.n	8003368 <_malloc_r+0xd0>
 8003326:	2a0b      	cmp	r2, #11
 8003328:	d917      	bls.n	800335a <_malloc_r+0xc2>
 800332a:	1961      	adds	r1, r4, r5
 800332c:	42a3      	cmp	r3, r4
 800332e:	6025      	str	r5, [r4, #0]
 8003330:	bf18      	it	ne
 8003332:	6059      	strne	r1, [r3, #4]
 8003334:	6863      	ldr	r3, [r4, #4]
 8003336:	bf08      	it	eq
 8003338:	f8c8 1000 	streq.w	r1, [r8]
 800333c:	5162      	str	r2, [r4, r5]
 800333e:	604b      	str	r3, [r1, #4]
 8003340:	4630      	mov	r0, r6
 8003342:	f000 f82f 	bl	80033a4 <__malloc_unlock>
 8003346:	f104 000b 	add.w	r0, r4, #11
 800334a:	1d23      	adds	r3, r4, #4
 800334c:	f020 0007 	bic.w	r0, r0, #7
 8003350:	1ac2      	subs	r2, r0, r3
 8003352:	bf1c      	itt	ne
 8003354:	1a1b      	subne	r3, r3, r0
 8003356:	50a3      	strne	r3, [r4, r2]
 8003358:	e7af      	b.n	80032ba <_malloc_r+0x22>
 800335a:	6862      	ldr	r2, [r4, #4]
 800335c:	42a3      	cmp	r3, r4
 800335e:	bf0c      	ite	eq
 8003360:	f8c8 2000 	streq.w	r2, [r8]
 8003364:	605a      	strne	r2, [r3, #4]
 8003366:	e7eb      	b.n	8003340 <_malloc_r+0xa8>
 8003368:	4623      	mov	r3, r4
 800336a:	6864      	ldr	r4, [r4, #4]
 800336c:	e7ae      	b.n	80032cc <_malloc_r+0x34>
 800336e:	463c      	mov	r4, r7
 8003370:	687f      	ldr	r7, [r7, #4]
 8003372:	e7b6      	b.n	80032e2 <_malloc_r+0x4a>
 8003374:	461a      	mov	r2, r3
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	42a3      	cmp	r3, r4
 800337a:	d1fb      	bne.n	8003374 <_malloc_r+0xdc>
 800337c:	2300      	movs	r3, #0
 800337e:	6053      	str	r3, [r2, #4]
 8003380:	e7de      	b.n	8003340 <_malloc_r+0xa8>
 8003382:	230c      	movs	r3, #12
 8003384:	6033      	str	r3, [r6, #0]
 8003386:	4630      	mov	r0, r6
 8003388:	f000 f80c 	bl	80033a4 <__malloc_unlock>
 800338c:	e794      	b.n	80032b8 <_malloc_r+0x20>
 800338e:	6005      	str	r5, [r0, #0]
 8003390:	e7d6      	b.n	8003340 <_malloc_r+0xa8>
 8003392:	bf00      	nop
 8003394:	2000a7bc 	.word	0x2000a7bc

08003398 <__malloc_lock>:
 8003398:	4801      	ldr	r0, [pc, #4]	@ (80033a0 <__malloc_lock+0x8>)
 800339a:	f7ff bf0f 	b.w	80031bc <__retarget_lock_acquire_recursive>
 800339e:	bf00      	nop
 80033a0:	2000a7b4 	.word	0x2000a7b4

080033a4 <__malloc_unlock>:
 80033a4:	4801      	ldr	r0, [pc, #4]	@ (80033ac <__malloc_unlock+0x8>)
 80033a6:	f7ff bf0a 	b.w	80031be <__retarget_lock_release_recursive>
 80033aa:	bf00      	nop
 80033ac:	2000a7b4 	.word	0x2000a7b4

080033b0 <__ssputs_r>:
 80033b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b4:	688e      	ldr	r6, [r1, #8]
 80033b6:	461f      	mov	r7, r3
 80033b8:	42be      	cmp	r6, r7
 80033ba:	680b      	ldr	r3, [r1, #0]
 80033bc:	4682      	mov	sl, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	4690      	mov	r8, r2
 80033c2:	d82d      	bhi.n	8003420 <__ssputs_r+0x70>
 80033c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033cc:	d026      	beq.n	800341c <__ssputs_r+0x6c>
 80033ce:	6965      	ldr	r5, [r4, #20]
 80033d0:	6909      	ldr	r1, [r1, #16]
 80033d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033d6:	eba3 0901 	sub.w	r9, r3, r1
 80033da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033de:	1c7b      	adds	r3, r7, #1
 80033e0:	444b      	add	r3, r9
 80033e2:	106d      	asrs	r5, r5, #1
 80033e4:	429d      	cmp	r5, r3
 80033e6:	bf38      	it	cc
 80033e8:	461d      	movcc	r5, r3
 80033ea:	0553      	lsls	r3, r2, #21
 80033ec:	d527      	bpl.n	800343e <__ssputs_r+0x8e>
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7ff ff52 	bl	8003298 <_malloc_r>
 80033f4:	4606      	mov	r6, r0
 80033f6:	b360      	cbz	r0, 8003452 <__ssputs_r+0xa2>
 80033f8:	6921      	ldr	r1, [r4, #16]
 80033fa:	464a      	mov	r2, r9
 80033fc:	f000 fae8 	bl	80039d0 <memcpy>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	6126      	str	r6, [r4, #16]
 800340e:	6165      	str	r5, [r4, #20]
 8003410:	444e      	add	r6, r9
 8003412:	eba5 0509 	sub.w	r5, r5, r9
 8003416:	6026      	str	r6, [r4, #0]
 8003418:	60a5      	str	r5, [r4, #8]
 800341a:	463e      	mov	r6, r7
 800341c:	42be      	cmp	r6, r7
 800341e:	d900      	bls.n	8003422 <__ssputs_r+0x72>
 8003420:	463e      	mov	r6, r7
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	4632      	mov	r2, r6
 8003426:	4641      	mov	r1, r8
 8003428:	f000 faa8 	bl	800397c <memmove>
 800342c:	68a3      	ldr	r3, [r4, #8]
 800342e:	1b9b      	subs	r3, r3, r6
 8003430:	60a3      	str	r3, [r4, #8]
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	4433      	add	r3, r6
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	2000      	movs	r0, #0
 800343a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343e:	462a      	mov	r2, r5
 8003440:	f000 fad4 	bl	80039ec <_realloc_r>
 8003444:	4606      	mov	r6, r0
 8003446:	2800      	cmp	r0, #0
 8003448:	d1e0      	bne.n	800340c <__ssputs_r+0x5c>
 800344a:	6921      	ldr	r1, [r4, #16]
 800344c:	4650      	mov	r0, sl
 800344e:	f7ff feb7 	bl	80031c0 <_free_r>
 8003452:	230c      	movs	r3, #12
 8003454:	f8ca 3000 	str.w	r3, [sl]
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	e7e9      	b.n	800343a <__ssputs_r+0x8a>
	...

08003468 <_svfiprintf_r>:
 8003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346c:	4698      	mov	r8, r3
 800346e:	898b      	ldrh	r3, [r1, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	b09d      	sub	sp, #116	@ 0x74
 8003474:	4607      	mov	r7, r0
 8003476:	460d      	mov	r5, r1
 8003478:	4614      	mov	r4, r2
 800347a:	d510      	bpl.n	800349e <_svfiprintf_r+0x36>
 800347c:	690b      	ldr	r3, [r1, #16]
 800347e:	b973      	cbnz	r3, 800349e <_svfiprintf_r+0x36>
 8003480:	2140      	movs	r1, #64	@ 0x40
 8003482:	f7ff ff09 	bl	8003298 <_malloc_r>
 8003486:	6028      	str	r0, [r5, #0]
 8003488:	6128      	str	r0, [r5, #16]
 800348a:	b930      	cbnz	r0, 800349a <_svfiprintf_r+0x32>
 800348c:	230c      	movs	r3, #12
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	b01d      	add	sp, #116	@ 0x74
 8003496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349a:	2340      	movs	r3, #64	@ 0x40
 800349c:	616b      	str	r3, [r5, #20]
 800349e:	2300      	movs	r3, #0
 80034a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80034a2:	2320      	movs	r3, #32
 80034a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ac:	2330      	movs	r3, #48	@ 0x30
 80034ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800364c <_svfiprintf_r+0x1e4>
 80034b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034b6:	f04f 0901 	mov.w	r9, #1
 80034ba:	4623      	mov	r3, r4
 80034bc:	469a      	mov	sl, r3
 80034be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034c2:	b10a      	cbz	r2, 80034c8 <_svfiprintf_r+0x60>
 80034c4:	2a25      	cmp	r2, #37	@ 0x25
 80034c6:	d1f9      	bne.n	80034bc <_svfiprintf_r+0x54>
 80034c8:	ebba 0b04 	subs.w	fp, sl, r4
 80034cc:	d00b      	beq.n	80034e6 <_svfiprintf_r+0x7e>
 80034ce:	465b      	mov	r3, fp
 80034d0:	4622      	mov	r2, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	4638      	mov	r0, r7
 80034d6:	f7ff ff6b 	bl	80033b0 <__ssputs_r>
 80034da:	3001      	adds	r0, #1
 80034dc:	f000 80a7 	beq.w	800362e <_svfiprintf_r+0x1c6>
 80034e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034e2:	445a      	add	r2, fp
 80034e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80034e6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 809f 	beq.w	800362e <_svfiprintf_r+0x1c6>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295
 80034f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034fa:	f10a 0a01 	add.w	sl, sl, #1
 80034fe:	9304      	str	r3, [sp, #16]
 8003500:	9307      	str	r3, [sp, #28]
 8003502:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003506:	931a      	str	r3, [sp, #104]	@ 0x68
 8003508:	4654      	mov	r4, sl
 800350a:	2205      	movs	r2, #5
 800350c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003510:	484e      	ldr	r0, [pc, #312]	@ (800364c <_svfiprintf_r+0x1e4>)
 8003512:	f7fc fe5d 	bl	80001d0 <memchr>
 8003516:	9a04      	ldr	r2, [sp, #16]
 8003518:	b9d8      	cbnz	r0, 8003552 <_svfiprintf_r+0xea>
 800351a:	06d0      	lsls	r0, r2, #27
 800351c:	bf44      	itt	mi
 800351e:	2320      	movmi	r3, #32
 8003520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003524:	0711      	lsls	r1, r2, #28
 8003526:	bf44      	itt	mi
 8003528:	232b      	movmi	r3, #43	@ 0x2b
 800352a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800352e:	f89a 3000 	ldrb.w	r3, [sl]
 8003532:	2b2a      	cmp	r3, #42	@ 0x2a
 8003534:	d015      	beq.n	8003562 <_svfiprintf_r+0xfa>
 8003536:	9a07      	ldr	r2, [sp, #28]
 8003538:	4654      	mov	r4, sl
 800353a:	2000      	movs	r0, #0
 800353c:	f04f 0c0a 	mov.w	ip, #10
 8003540:	4621      	mov	r1, r4
 8003542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003546:	3b30      	subs	r3, #48	@ 0x30
 8003548:	2b09      	cmp	r3, #9
 800354a:	d94b      	bls.n	80035e4 <_svfiprintf_r+0x17c>
 800354c:	b1b0      	cbz	r0, 800357c <_svfiprintf_r+0x114>
 800354e:	9207      	str	r2, [sp, #28]
 8003550:	e014      	b.n	800357c <_svfiprintf_r+0x114>
 8003552:	eba0 0308 	sub.w	r3, r0, r8
 8003556:	fa09 f303 	lsl.w	r3, r9, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	9304      	str	r3, [sp, #16]
 800355e:	46a2      	mov	sl, r4
 8003560:	e7d2      	b.n	8003508 <_svfiprintf_r+0xa0>
 8003562:	9b03      	ldr	r3, [sp, #12]
 8003564:	1d19      	adds	r1, r3, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	9103      	str	r1, [sp, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfbb      	ittet	lt
 800356e:	425b      	neglt	r3, r3
 8003570:	f042 0202 	orrlt.w	r2, r2, #2
 8003574:	9307      	strge	r3, [sp, #28]
 8003576:	9307      	strlt	r3, [sp, #28]
 8003578:	bfb8      	it	lt
 800357a:	9204      	strlt	r2, [sp, #16]
 800357c:	7823      	ldrb	r3, [r4, #0]
 800357e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003580:	d10a      	bne.n	8003598 <_svfiprintf_r+0x130>
 8003582:	7863      	ldrb	r3, [r4, #1]
 8003584:	2b2a      	cmp	r3, #42	@ 0x2a
 8003586:	d132      	bne.n	80035ee <_svfiprintf_r+0x186>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	1d1a      	adds	r2, r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	9203      	str	r2, [sp, #12]
 8003590:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003594:	3402      	adds	r4, #2
 8003596:	9305      	str	r3, [sp, #20]
 8003598:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800365c <_svfiprintf_r+0x1f4>
 800359c:	7821      	ldrb	r1, [r4, #0]
 800359e:	2203      	movs	r2, #3
 80035a0:	4650      	mov	r0, sl
 80035a2:	f7fc fe15 	bl	80001d0 <memchr>
 80035a6:	b138      	cbz	r0, 80035b8 <_svfiprintf_r+0x150>
 80035a8:	9b04      	ldr	r3, [sp, #16]
 80035aa:	eba0 000a 	sub.w	r0, r0, sl
 80035ae:	2240      	movs	r2, #64	@ 0x40
 80035b0:	4082      	lsls	r2, r0
 80035b2:	4313      	orrs	r3, r2
 80035b4:	3401      	adds	r4, #1
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035bc:	4824      	ldr	r0, [pc, #144]	@ (8003650 <_svfiprintf_r+0x1e8>)
 80035be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035c2:	2206      	movs	r2, #6
 80035c4:	f7fc fe04 	bl	80001d0 <memchr>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d036      	beq.n	800363a <_svfiprintf_r+0x1d2>
 80035cc:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <_svfiprintf_r+0x1ec>)
 80035ce:	bb1b      	cbnz	r3, 8003618 <_svfiprintf_r+0x1b0>
 80035d0:	9b03      	ldr	r3, [sp, #12]
 80035d2:	3307      	adds	r3, #7
 80035d4:	f023 0307 	bic.w	r3, r3, #7
 80035d8:	3308      	adds	r3, #8
 80035da:	9303      	str	r3, [sp, #12]
 80035dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035de:	4433      	add	r3, r6
 80035e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80035e2:	e76a      	b.n	80034ba <_svfiprintf_r+0x52>
 80035e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80035e8:	460c      	mov	r4, r1
 80035ea:	2001      	movs	r0, #1
 80035ec:	e7a8      	b.n	8003540 <_svfiprintf_r+0xd8>
 80035ee:	2300      	movs	r3, #0
 80035f0:	3401      	adds	r4, #1
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	4619      	mov	r1, r3
 80035f6:	f04f 0c0a 	mov.w	ip, #10
 80035fa:	4620      	mov	r0, r4
 80035fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003600:	3a30      	subs	r2, #48	@ 0x30
 8003602:	2a09      	cmp	r2, #9
 8003604:	d903      	bls.n	800360e <_svfiprintf_r+0x1a6>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0c6      	beq.n	8003598 <_svfiprintf_r+0x130>
 800360a:	9105      	str	r1, [sp, #20]
 800360c:	e7c4      	b.n	8003598 <_svfiprintf_r+0x130>
 800360e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003612:	4604      	mov	r4, r0
 8003614:	2301      	movs	r3, #1
 8003616:	e7f0      	b.n	80035fa <_svfiprintf_r+0x192>
 8003618:	ab03      	add	r3, sp, #12
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	462a      	mov	r2, r5
 800361e:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <_svfiprintf_r+0x1f0>)
 8003620:	a904      	add	r1, sp, #16
 8003622:	4638      	mov	r0, r7
 8003624:	f3af 8000 	nop.w
 8003628:	1c42      	adds	r2, r0, #1
 800362a:	4606      	mov	r6, r0
 800362c:	d1d6      	bne.n	80035dc <_svfiprintf_r+0x174>
 800362e:	89ab      	ldrh	r3, [r5, #12]
 8003630:	065b      	lsls	r3, r3, #25
 8003632:	f53f af2d 	bmi.w	8003490 <_svfiprintf_r+0x28>
 8003636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003638:	e72c      	b.n	8003494 <_svfiprintf_r+0x2c>
 800363a:	ab03      	add	r3, sp, #12
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	462a      	mov	r2, r5
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <_svfiprintf_r+0x1f0>)
 8003642:	a904      	add	r1, sp, #16
 8003644:	4638      	mov	r0, r7
 8003646:	f000 f879 	bl	800373c <_printf_i>
 800364a:	e7ed      	b.n	8003628 <_svfiprintf_r+0x1c0>
 800364c:	08003b58 	.word	0x08003b58
 8003650:	08003b62 	.word	0x08003b62
 8003654:	00000000 	.word	0x00000000
 8003658:	080033b1 	.word	0x080033b1
 800365c:	08003b5e 	.word	0x08003b5e

08003660 <_printf_common>:
 8003660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003664:	4616      	mov	r6, r2
 8003666:	4698      	mov	r8, r3
 8003668:	688a      	ldr	r2, [r1, #8]
 800366a:	690b      	ldr	r3, [r1, #16]
 800366c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003670:	4293      	cmp	r3, r2
 8003672:	bfb8      	it	lt
 8003674:	4613      	movlt	r3, r2
 8003676:	6033      	str	r3, [r6, #0]
 8003678:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800367c:	4607      	mov	r7, r0
 800367e:	460c      	mov	r4, r1
 8003680:	b10a      	cbz	r2, 8003686 <_printf_common+0x26>
 8003682:	3301      	adds	r3, #1
 8003684:	6033      	str	r3, [r6, #0]
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	0699      	lsls	r1, r3, #26
 800368a:	bf42      	ittt	mi
 800368c:	6833      	ldrmi	r3, [r6, #0]
 800368e:	3302      	addmi	r3, #2
 8003690:	6033      	strmi	r3, [r6, #0]
 8003692:	6825      	ldr	r5, [r4, #0]
 8003694:	f015 0506 	ands.w	r5, r5, #6
 8003698:	d106      	bne.n	80036a8 <_printf_common+0x48>
 800369a:	f104 0a19 	add.w	sl, r4, #25
 800369e:	68e3      	ldr	r3, [r4, #12]
 80036a0:	6832      	ldr	r2, [r6, #0]
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	42ab      	cmp	r3, r5
 80036a6:	dc26      	bgt.n	80036f6 <_printf_common+0x96>
 80036a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	3b00      	subs	r3, #0
 80036b0:	bf18      	it	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	0692      	lsls	r2, r2, #26
 80036b6:	d42b      	bmi.n	8003710 <_printf_common+0xb0>
 80036b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036bc:	4641      	mov	r1, r8
 80036be:	4638      	mov	r0, r7
 80036c0:	47c8      	blx	r9
 80036c2:	3001      	adds	r0, #1
 80036c4:	d01e      	beq.n	8003704 <_printf_common+0xa4>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	6922      	ldr	r2, [r4, #16]
 80036ca:	f003 0306 	and.w	r3, r3, #6
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf02      	ittt	eq
 80036d2:	68e5      	ldreq	r5, [r4, #12]
 80036d4:	6833      	ldreq	r3, [r6, #0]
 80036d6:	1aed      	subeq	r5, r5, r3
 80036d8:	68a3      	ldr	r3, [r4, #8]
 80036da:	bf0c      	ite	eq
 80036dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e0:	2500      	movne	r5, #0
 80036e2:	4293      	cmp	r3, r2
 80036e4:	bfc4      	itt	gt
 80036e6:	1a9b      	subgt	r3, r3, r2
 80036e8:	18ed      	addgt	r5, r5, r3
 80036ea:	2600      	movs	r6, #0
 80036ec:	341a      	adds	r4, #26
 80036ee:	42b5      	cmp	r5, r6
 80036f0:	d11a      	bne.n	8003728 <_printf_common+0xc8>
 80036f2:	2000      	movs	r0, #0
 80036f4:	e008      	b.n	8003708 <_printf_common+0xa8>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4652      	mov	r2, sl
 80036fa:	4641      	mov	r1, r8
 80036fc:	4638      	mov	r0, r7
 80036fe:	47c8      	blx	r9
 8003700:	3001      	adds	r0, #1
 8003702:	d103      	bne.n	800370c <_printf_common+0xac>
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800370c:	3501      	adds	r5, #1
 800370e:	e7c6      	b.n	800369e <_printf_common+0x3e>
 8003710:	18e1      	adds	r1, r4, r3
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	2030      	movs	r0, #48	@ 0x30
 8003716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800371a:	4422      	add	r2, r4
 800371c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003724:	3302      	adds	r3, #2
 8003726:	e7c7      	b.n	80036b8 <_printf_common+0x58>
 8003728:	2301      	movs	r3, #1
 800372a:	4622      	mov	r2, r4
 800372c:	4641      	mov	r1, r8
 800372e:	4638      	mov	r0, r7
 8003730:	47c8      	blx	r9
 8003732:	3001      	adds	r0, #1
 8003734:	d0e6      	beq.n	8003704 <_printf_common+0xa4>
 8003736:	3601      	adds	r6, #1
 8003738:	e7d9      	b.n	80036ee <_printf_common+0x8e>
	...

0800373c <_printf_i>:
 800373c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	7e0f      	ldrb	r7, [r1, #24]
 8003742:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003744:	2f78      	cmp	r7, #120	@ 0x78
 8003746:	4691      	mov	r9, r2
 8003748:	4680      	mov	r8, r0
 800374a:	460c      	mov	r4, r1
 800374c:	469a      	mov	sl, r3
 800374e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003752:	d807      	bhi.n	8003764 <_printf_i+0x28>
 8003754:	2f62      	cmp	r7, #98	@ 0x62
 8003756:	d80a      	bhi.n	800376e <_printf_i+0x32>
 8003758:	2f00      	cmp	r7, #0
 800375a:	f000 80d2 	beq.w	8003902 <_printf_i+0x1c6>
 800375e:	2f58      	cmp	r7, #88	@ 0x58
 8003760:	f000 80b9 	beq.w	80038d6 <_printf_i+0x19a>
 8003764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800376c:	e03a      	b.n	80037e4 <_printf_i+0xa8>
 800376e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003772:	2b15      	cmp	r3, #21
 8003774:	d8f6      	bhi.n	8003764 <_printf_i+0x28>
 8003776:	a101      	add	r1, pc, #4	@ (adr r1, 800377c <_printf_i+0x40>)
 8003778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800377c:	080037d5 	.word	0x080037d5
 8003780:	080037e9 	.word	0x080037e9
 8003784:	08003765 	.word	0x08003765
 8003788:	08003765 	.word	0x08003765
 800378c:	08003765 	.word	0x08003765
 8003790:	08003765 	.word	0x08003765
 8003794:	080037e9 	.word	0x080037e9
 8003798:	08003765 	.word	0x08003765
 800379c:	08003765 	.word	0x08003765
 80037a0:	08003765 	.word	0x08003765
 80037a4:	08003765 	.word	0x08003765
 80037a8:	080038e9 	.word	0x080038e9
 80037ac:	08003813 	.word	0x08003813
 80037b0:	080038a3 	.word	0x080038a3
 80037b4:	08003765 	.word	0x08003765
 80037b8:	08003765 	.word	0x08003765
 80037bc:	0800390b 	.word	0x0800390b
 80037c0:	08003765 	.word	0x08003765
 80037c4:	08003813 	.word	0x08003813
 80037c8:	08003765 	.word	0x08003765
 80037cc:	08003765 	.word	0x08003765
 80037d0:	080038ab 	.word	0x080038ab
 80037d4:	6833      	ldr	r3, [r6, #0]
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6032      	str	r2, [r6, #0]
 80037dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037e4:	2301      	movs	r3, #1
 80037e6:	e09d      	b.n	8003924 <_printf_i+0x1e8>
 80037e8:	6833      	ldr	r3, [r6, #0]
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	1d19      	adds	r1, r3, #4
 80037ee:	6031      	str	r1, [r6, #0]
 80037f0:	0606      	lsls	r6, r0, #24
 80037f2:	d501      	bpl.n	80037f8 <_printf_i+0xbc>
 80037f4:	681d      	ldr	r5, [r3, #0]
 80037f6:	e003      	b.n	8003800 <_printf_i+0xc4>
 80037f8:	0645      	lsls	r5, r0, #25
 80037fa:	d5fb      	bpl.n	80037f4 <_printf_i+0xb8>
 80037fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003800:	2d00      	cmp	r5, #0
 8003802:	da03      	bge.n	800380c <_printf_i+0xd0>
 8003804:	232d      	movs	r3, #45	@ 0x2d
 8003806:	426d      	negs	r5, r5
 8003808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800380c:	4859      	ldr	r0, [pc, #356]	@ (8003974 <_printf_i+0x238>)
 800380e:	230a      	movs	r3, #10
 8003810:	e011      	b.n	8003836 <_printf_i+0xfa>
 8003812:	6821      	ldr	r1, [r4, #0]
 8003814:	6833      	ldr	r3, [r6, #0]
 8003816:	0608      	lsls	r0, r1, #24
 8003818:	f853 5b04 	ldr.w	r5, [r3], #4
 800381c:	d402      	bmi.n	8003824 <_printf_i+0xe8>
 800381e:	0649      	lsls	r1, r1, #25
 8003820:	bf48      	it	mi
 8003822:	b2ad      	uxthmi	r5, r5
 8003824:	2f6f      	cmp	r7, #111	@ 0x6f
 8003826:	4853      	ldr	r0, [pc, #332]	@ (8003974 <_printf_i+0x238>)
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	bf14      	ite	ne
 800382c:	230a      	movne	r3, #10
 800382e:	2308      	moveq	r3, #8
 8003830:	2100      	movs	r1, #0
 8003832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003836:	6866      	ldr	r6, [r4, #4]
 8003838:	60a6      	str	r6, [r4, #8]
 800383a:	2e00      	cmp	r6, #0
 800383c:	bfa2      	ittt	ge
 800383e:	6821      	ldrge	r1, [r4, #0]
 8003840:	f021 0104 	bicge.w	r1, r1, #4
 8003844:	6021      	strge	r1, [r4, #0]
 8003846:	b90d      	cbnz	r5, 800384c <_printf_i+0x110>
 8003848:	2e00      	cmp	r6, #0
 800384a:	d04b      	beq.n	80038e4 <_printf_i+0x1a8>
 800384c:	4616      	mov	r6, r2
 800384e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003852:	fb03 5711 	mls	r7, r3, r1, r5
 8003856:	5dc7      	ldrb	r7, [r0, r7]
 8003858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800385c:	462f      	mov	r7, r5
 800385e:	42bb      	cmp	r3, r7
 8003860:	460d      	mov	r5, r1
 8003862:	d9f4      	bls.n	800384e <_printf_i+0x112>
 8003864:	2b08      	cmp	r3, #8
 8003866:	d10b      	bne.n	8003880 <_printf_i+0x144>
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	07df      	lsls	r7, r3, #31
 800386c:	d508      	bpl.n	8003880 <_printf_i+0x144>
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	6861      	ldr	r1, [r4, #4]
 8003872:	4299      	cmp	r1, r3
 8003874:	bfde      	ittt	le
 8003876:	2330      	movle	r3, #48	@ 0x30
 8003878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800387c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003880:	1b92      	subs	r2, r2, r6
 8003882:	6122      	str	r2, [r4, #16]
 8003884:	f8cd a000 	str.w	sl, [sp]
 8003888:	464b      	mov	r3, r9
 800388a:	aa03      	add	r2, sp, #12
 800388c:	4621      	mov	r1, r4
 800388e:	4640      	mov	r0, r8
 8003890:	f7ff fee6 	bl	8003660 <_printf_common>
 8003894:	3001      	adds	r0, #1
 8003896:	d14a      	bne.n	800392e <_printf_i+0x1f2>
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	b004      	add	sp, #16
 800389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	4833      	ldr	r0, [pc, #204]	@ (8003978 <_printf_i+0x23c>)
 80038ac:	2778      	movs	r7, #120	@ 0x78
 80038ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	6831      	ldr	r1, [r6, #0]
 80038b6:	061f      	lsls	r7, r3, #24
 80038b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80038bc:	d402      	bmi.n	80038c4 <_printf_i+0x188>
 80038be:	065f      	lsls	r7, r3, #25
 80038c0:	bf48      	it	mi
 80038c2:	b2ad      	uxthmi	r5, r5
 80038c4:	6031      	str	r1, [r6, #0]
 80038c6:	07d9      	lsls	r1, r3, #31
 80038c8:	bf44      	itt	mi
 80038ca:	f043 0320 	orrmi.w	r3, r3, #32
 80038ce:	6023      	strmi	r3, [r4, #0]
 80038d0:	b11d      	cbz	r5, 80038da <_printf_i+0x19e>
 80038d2:	2310      	movs	r3, #16
 80038d4:	e7ac      	b.n	8003830 <_printf_i+0xf4>
 80038d6:	4827      	ldr	r0, [pc, #156]	@ (8003974 <_printf_i+0x238>)
 80038d8:	e7e9      	b.n	80038ae <_printf_i+0x172>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	f023 0320 	bic.w	r3, r3, #32
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	e7f6      	b.n	80038d2 <_printf_i+0x196>
 80038e4:	4616      	mov	r6, r2
 80038e6:	e7bd      	b.n	8003864 <_printf_i+0x128>
 80038e8:	6833      	ldr	r3, [r6, #0]
 80038ea:	6825      	ldr	r5, [r4, #0]
 80038ec:	6961      	ldr	r1, [r4, #20]
 80038ee:	1d18      	adds	r0, r3, #4
 80038f0:	6030      	str	r0, [r6, #0]
 80038f2:	062e      	lsls	r6, r5, #24
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	d501      	bpl.n	80038fc <_printf_i+0x1c0>
 80038f8:	6019      	str	r1, [r3, #0]
 80038fa:	e002      	b.n	8003902 <_printf_i+0x1c6>
 80038fc:	0668      	lsls	r0, r5, #25
 80038fe:	d5fb      	bpl.n	80038f8 <_printf_i+0x1bc>
 8003900:	8019      	strh	r1, [r3, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	6123      	str	r3, [r4, #16]
 8003906:	4616      	mov	r6, r2
 8003908:	e7bc      	b.n	8003884 <_printf_i+0x148>
 800390a:	6833      	ldr	r3, [r6, #0]
 800390c:	1d1a      	adds	r2, r3, #4
 800390e:	6032      	str	r2, [r6, #0]
 8003910:	681e      	ldr	r6, [r3, #0]
 8003912:	6862      	ldr	r2, [r4, #4]
 8003914:	2100      	movs	r1, #0
 8003916:	4630      	mov	r0, r6
 8003918:	f7fc fc5a 	bl	80001d0 <memchr>
 800391c:	b108      	cbz	r0, 8003922 <_printf_i+0x1e6>
 800391e:	1b80      	subs	r0, r0, r6
 8003920:	6060      	str	r0, [r4, #4]
 8003922:	6863      	ldr	r3, [r4, #4]
 8003924:	6123      	str	r3, [r4, #16]
 8003926:	2300      	movs	r3, #0
 8003928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800392c:	e7aa      	b.n	8003884 <_printf_i+0x148>
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	4632      	mov	r2, r6
 8003932:	4649      	mov	r1, r9
 8003934:	4640      	mov	r0, r8
 8003936:	47d0      	blx	sl
 8003938:	3001      	adds	r0, #1
 800393a:	d0ad      	beq.n	8003898 <_printf_i+0x15c>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	079b      	lsls	r3, r3, #30
 8003940:	d413      	bmi.n	800396a <_printf_i+0x22e>
 8003942:	68e0      	ldr	r0, [r4, #12]
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	4298      	cmp	r0, r3
 8003948:	bfb8      	it	lt
 800394a:	4618      	movlt	r0, r3
 800394c:	e7a6      	b.n	800389c <_printf_i+0x160>
 800394e:	2301      	movs	r3, #1
 8003950:	4632      	mov	r2, r6
 8003952:	4649      	mov	r1, r9
 8003954:	4640      	mov	r0, r8
 8003956:	47d0      	blx	sl
 8003958:	3001      	adds	r0, #1
 800395a:	d09d      	beq.n	8003898 <_printf_i+0x15c>
 800395c:	3501      	adds	r5, #1
 800395e:	68e3      	ldr	r3, [r4, #12]
 8003960:	9903      	ldr	r1, [sp, #12]
 8003962:	1a5b      	subs	r3, r3, r1
 8003964:	42ab      	cmp	r3, r5
 8003966:	dcf2      	bgt.n	800394e <_printf_i+0x212>
 8003968:	e7eb      	b.n	8003942 <_printf_i+0x206>
 800396a:	2500      	movs	r5, #0
 800396c:	f104 0619 	add.w	r6, r4, #25
 8003970:	e7f5      	b.n	800395e <_printf_i+0x222>
 8003972:	bf00      	nop
 8003974:	08003b69 	.word	0x08003b69
 8003978:	08003b7a 	.word	0x08003b7a

0800397c <memmove>:
 800397c:	4288      	cmp	r0, r1
 800397e:	b510      	push	{r4, lr}
 8003980:	eb01 0402 	add.w	r4, r1, r2
 8003984:	d902      	bls.n	800398c <memmove+0x10>
 8003986:	4284      	cmp	r4, r0
 8003988:	4623      	mov	r3, r4
 800398a:	d807      	bhi.n	800399c <memmove+0x20>
 800398c:	1e43      	subs	r3, r0, #1
 800398e:	42a1      	cmp	r1, r4
 8003990:	d008      	beq.n	80039a4 <memmove+0x28>
 8003992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800399a:	e7f8      	b.n	800398e <memmove+0x12>
 800399c:	4402      	add	r2, r0
 800399e:	4601      	mov	r1, r0
 80039a0:	428a      	cmp	r2, r1
 80039a2:	d100      	bne.n	80039a6 <memmove+0x2a>
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ae:	e7f7      	b.n	80039a0 <memmove+0x24>

080039b0 <_sbrk_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4d06      	ldr	r5, [pc, #24]	@ (80039cc <_sbrk_r+0x1c>)
 80039b4:	2300      	movs	r3, #0
 80039b6:	4604      	mov	r4, r0
 80039b8:	4608      	mov	r0, r1
 80039ba:	602b      	str	r3, [r5, #0]
 80039bc:	f7fd fc1e 	bl	80011fc <_sbrk>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_sbrk_r+0x1a>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_sbrk_r+0x1a>
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	2000a7b0 	.word	0x2000a7b0

080039d0 <memcpy>:
 80039d0:	440a      	add	r2, r1
 80039d2:	4291      	cmp	r1, r2
 80039d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039d8:	d100      	bne.n	80039dc <memcpy+0xc>
 80039da:	4770      	bx	lr
 80039dc:	b510      	push	{r4, lr}
 80039de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039e6:	4291      	cmp	r1, r2
 80039e8:	d1f9      	bne.n	80039de <memcpy+0xe>
 80039ea:	bd10      	pop	{r4, pc}

080039ec <_realloc_r>:
 80039ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f0:	4680      	mov	r8, r0
 80039f2:	4615      	mov	r5, r2
 80039f4:	460c      	mov	r4, r1
 80039f6:	b921      	cbnz	r1, 8003a02 <_realloc_r+0x16>
 80039f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039fc:	4611      	mov	r1, r2
 80039fe:	f7ff bc4b 	b.w	8003298 <_malloc_r>
 8003a02:	b92a      	cbnz	r2, 8003a10 <_realloc_r+0x24>
 8003a04:	f7ff fbdc 	bl	80031c0 <_free_r>
 8003a08:	2400      	movs	r4, #0
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a10:	f000 f81a 	bl	8003a48 <_malloc_usable_size_r>
 8003a14:	4285      	cmp	r5, r0
 8003a16:	4606      	mov	r6, r0
 8003a18:	d802      	bhi.n	8003a20 <_realloc_r+0x34>
 8003a1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a1e:	d8f4      	bhi.n	8003a0a <_realloc_r+0x1e>
 8003a20:	4629      	mov	r1, r5
 8003a22:	4640      	mov	r0, r8
 8003a24:	f7ff fc38 	bl	8003298 <_malloc_r>
 8003a28:	4607      	mov	r7, r0
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d0ec      	beq.n	8003a08 <_realloc_r+0x1c>
 8003a2e:	42b5      	cmp	r5, r6
 8003a30:	462a      	mov	r2, r5
 8003a32:	4621      	mov	r1, r4
 8003a34:	bf28      	it	cs
 8003a36:	4632      	movcs	r2, r6
 8003a38:	f7ff ffca 	bl	80039d0 <memcpy>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f7ff fbbe 	bl	80031c0 <_free_r>
 8003a44:	463c      	mov	r4, r7
 8003a46:	e7e0      	b.n	8003a0a <_realloc_r+0x1e>

08003a48 <_malloc_usable_size_r>:
 8003a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a4c:	1f18      	subs	r0, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bfbc      	itt	lt
 8003a52:	580b      	ldrlt	r3, [r1, r0]
 8003a54:	18c0      	addlt	r0, r0, r3
 8003a56:	4770      	bx	lr

08003a58 <_init>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr

08003a64 <_fini>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr
